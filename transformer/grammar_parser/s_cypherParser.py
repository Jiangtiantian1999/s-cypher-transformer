# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1943,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,1,0,1,0,1,0,3,0,250,8,0,1,1,1,1,3,
        1,254,8,1,1,1,1,1,3,1,258,8,1,1,1,1,1,3,1,262,8,1,1,1,1,1,3,1,266,
        8,1,3,1,268,8,1,1,1,3,1,271,8,1,1,1,3,1,274,8,1,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,282,8,2,1,2,3,2,285,8,2,1,2,3,2,288,8,2,1,3,1,3,3,3,
        292,8,3,1,3,1,3,1,3,1,3,3,3,298,8,3,1,3,3,3,301,8,3,1,3,1,3,1,3,
        3,3,306,8,3,1,3,1,3,1,3,1,3,3,3,312,8,3,1,3,3,3,315,8,3,1,3,1,3,
        1,3,3,3,320,8,3,1,3,3,3,323,8,3,1,3,3,3,326,8,3,1,3,1,3,3,3,330,
        8,3,1,3,1,3,1,3,1,3,3,3,336,8,3,1,3,3,3,339,8,3,1,3,1,3,1,3,3,3,
        344,8,3,1,3,3,3,347,8,3,1,3,3,3,350,8,3,1,3,1,3,3,3,354,8,3,1,3,
        1,3,3,3,358,8,3,1,3,3,3,361,8,3,1,3,1,3,3,3,365,8,3,1,3,1,3,3,3,
        369,8,3,1,3,1,3,1,3,1,3,3,3,375,8,3,1,3,1,3,3,3,379,8,3,1,3,1,3,
        1,3,1,3,3,3,385,8,3,1,3,1,3,3,3,389,8,3,1,3,1,3,1,3,1,3,3,3,395,
        8,3,1,3,1,3,3,3,399,8,3,1,4,1,4,3,4,403,8,4,1,4,1,4,3,4,407,8,4,
        1,4,1,4,3,4,411,8,4,1,4,5,4,414,8,4,10,4,12,4,417,9,4,1,5,1,5,1,
        5,1,5,3,5,423,8,5,1,5,1,5,1,5,3,5,428,8,5,1,6,1,6,3,6,432,8,6,1,
        6,1,6,3,6,436,8,6,1,6,1,6,3,6,440,8,6,1,6,1,6,3,6,444,8,6,1,6,5,
        6,447,8,6,10,6,12,6,450,9,6,1,7,1,7,1,7,1,7,3,7,456,8,7,1,7,1,7,
        1,7,3,7,461,8,7,1,8,1,8,3,8,465,8,8,1,8,1,8,1,9,1,9,3,9,471,8,9,
        1,9,1,9,1,10,1,10,3,10,477,8,10,1,10,1,10,1,10,3,10,482,8,10,1,10,
        3,10,485,8,10,1,11,1,11,3,11,489,8,11,1,11,1,11,3,11,493,8,11,1,
        11,1,11,1,11,1,11,3,11,499,8,11,1,11,1,11,3,11,503,8,11,1,11,1,11,
        1,11,3,11,508,8,11,1,12,1,12,3,12,512,8,12,1,12,1,12,3,12,516,8,
        12,1,12,1,12,3,12,520,8,12,1,12,1,12,1,13,1,13,3,13,526,8,13,1,13,
        1,13,3,13,530,8,13,1,13,1,13,1,14,1,14,3,14,536,8,14,1,14,1,14,3,
        14,540,8,14,3,14,542,8,14,1,14,1,14,3,14,546,8,14,3,14,548,8,14,
        1,14,1,14,3,14,552,8,14,3,14,554,8,14,1,14,1,14,3,14,558,8,14,3,
        14,560,8,14,1,14,1,14,1,15,1,15,3,15,566,8,15,1,16,1,16,3,16,570,
        8,16,1,16,1,16,1,16,1,16,1,16,3,16,577,8,16,1,16,1,16,1,16,1,16,
        5,16,583,8,16,10,16,12,16,586,9,16,3,16,588,8,16,1,16,1,16,1,17,
        1,17,3,17,594,8,17,1,17,1,17,3,17,598,8,17,3,17,600,8,17,1,18,3,
        18,603,8,18,1,18,1,18,3,18,607,8,18,1,18,1,18,3,18,611,8,18,3,18,
        613,8,18,1,19,1,19,3,19,617,8,19,1,19,1,19,3,19,621,8,19,3,19,623,
        8,19,1,19,1,19,3,19,627,8,19,3,19,629,8,19,1,19,3,19,632,8,19,1,
        19,1,19,3,19,636,8,19,3,19,638,8,19,1,19,1,19,3,19,642,8,19,3,19,
        644,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,653,8,20,1,21,1,
        21,3,21,657,8,21,1,21,1,21,5,21,661,8,21,10,21,12,21,664,9,21,1,
        22,3,22,667,8,22,1,22,1,22,1,22,1,22,1,23,3,23,674,8,23,1,23,1,23,
        3,23,678,8,23,1,23,1,23,3,23,682,8,23,1,23,1,23,1,24,1,24,3,24,688,
        8,24,1,24,4,24,691,8,24,11,24,12,24,692,1,24,3,24,696,8,24,1,24,
        3,24,699,8,24,3,24,701,8,24,1,24,3,24,704,8,24,1,24,1,24,1,25,1,
        25,3,25,710,8,25,1,25,5,25,713,8,25,10,25,12,25,716,9,25,1,26,1,
        26,1,26,1,26,1,26,1,27,1,27,3,27,725,8,27,1,27,1,27,3,27,729,8,27,
        1,27,1,27,3,27,733,8,27,1,27,1,27,3,27,737,8,27,1,27,1,27,3,27,741,
        8,27,1,27,3,27,744,8,27,1,27,1,27,1,28,1,28,3,28,750,8,28,1,29,1,
        29,1,30,1,30,1,31,3,31,757,8,31,1,31,1,31,3,31,761,8,31,1,31,3,31,
        764,8,31,1,31,3,31,767,8,31,1,31,1,31,1,32,1,32,1,33,1,33,3,33,775,
        8,33,1,33,5,33,778,8,33,10,33,12,33,781,9,33,1,34,1,34,1,34,1,34,
        3,34,787,8,34,1,34,1,34,1,34,3,34,792,8,34,1,34,3,34,795,8,34,1,
        35,1,35,3,35,799,8,35,1,36,1,36,3,36,803,8,36,5,36,805,8,36,10,36,
        12,36,808,9,36,1,36,1,36,1,36,3,36,813,8,36,5,36,815,8,36,10,36,
        12,36,818,9,36,1,36,1,36,3,36,822,8,36,1,36,5,36,825,8,36,10,36,
        12,36,828,9,36,1,36,3,36,831,8,36,1,36,3,36,834,8,36,3,36,836,8,
        36,1,37,4,37,839,8,37,11,37,12,37,840,1,37,1,37,1,38,1,38,3,38,847,
        8,38,5,38,849,8,38,10,38,12,38,852,9,38,1,38,1,38,3,38,856,8,38,
        5,38,858,8,38,10,38,12,38,861,9,38,1,38,1,38,3,38,865,8,38,1,39,
        1,39,1,39,3,39,870,8,39,1,40,1,40,3,40,874,8,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,41,1,41,3,41,884,8,41,1,41,1,41,1,41,5,41,889,8,41,
        10,41,12,41,892,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,3,42,904,8,42,1,43,1,43,3,43,908,8,43,1,43,1,43,1,44,1,44,3,
        44,914,8,44,1,44,1,44,3,44,918,8,44,1,44,1,44,3,44,922,8,44,1,44,
        5,44,925,8,44,10,44,12,44,928,9,44,1,45,1,45,1,45,1,45,3,45,934,
        8,45,1,45,1,45,3,45,938,8,45,1,45,5,45,941,8,45,10,45,12,45,944,
        9,45,1,46,1,46,1,46,1,46,3,46,950,8,46,1,47,1,47,1,47,1,47,3,47,
        956,8,47,1,47,1,47,1,47,3,47,961,8,47,1,48,1,48,1,48,1,48,3,48,967,
        8,48,1,48,3,48,970,8,48,1,48,1,48,1,48,1,48,3,48,976,8,48,3,48,978,
        8,48,1,49,1,49,3,49,982,8,49,1,49,1,49,3,49,986,8,49,1,49,5,49,989,
        8,49,10,49,12,49,992,9,49,1,49,3,49,995,8,49,1,49,3,49,998,8,49,
        1,50,1,50,1,50,1,50,1,50,3,50,1005,8,50,1,50,1,50,1,51,1,51,1,51,
        3,51,1012,8,51,1,51,3,51,1015,8,51,1,52,1,52,1,52,1,53,3,53,1021,
        8,53,1,53,3,53,1024,8,53,1,53,1,53,1,53,1,53,3,53,1030,8,53,1,53,
        1,53,3,53,1034,8,53,1,53,1,53,3,53,1038,8,53,1,54,1,54,3,54,1042,
        8,54,1,54,1,54,3,54,1046,8,54,1,54,5,54,1049,8,54,10,54,12,54,1052,
        9,54,1,54,1,54,3,54,1056,8,54,1,54,1,54,3,54,1060,8,54,1,54,5,54,
        1063,8,54,10,54,12,54,1066,9,54,3,54,1068,8,54,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,3,55,1077,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,3,56,1086,8,56,1,56,5,56,1089,8,56,10,56,12,56,1092,9,56,1,57,
        1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,3,59,1104,8,59,1,59,
        3,59,1107,8,59,1,60,1,60,1,60,1,60,1,61,1,61,3,61,1115,8,61,1,61,
        1,61,3,61,1119,8,61,1,61,5,61,1122,8,61,10,61,12,61,1125,9,61,1,
        62,1,62,1,63,1,63,3,63,1131,8,63,1,63,5,63,1134,8,63,10,63,12,63,
        1137,9,63,1,63,1,63,1,63,1,63,3,63,1143,8,63,1,64,1,64,3,64,1147,
        8,64,1,64,4,64,1150,8,64,11,64,12,64,1151,1,65,1,65,3,65,1156,8,
        65,1,65,1,65,1,66,1,66,3,66,1162,8,66,1,66,1,66,3,66,1166,8,66,1,
        66,3,66,1169,8,66,1,66,3,66,1172,8,66,1,66,1,66,3,66,1176,8,66,1,
        66,1,66,1,66,1,66,3,66,1182,8,66,1,66,1,66,3,66,1186,8,66,1,66,3,
        66,1189,8,66,1,66,3,66,1192,8,66,1,66,1,66,1,66,1,66,3,66,1198,8,
        66,1,66,3,66,1201,8,66,1,66,3,66,1204,8,66,1,66,1,66,3,66,1208,8,
        66,1,66,1,66,1,66,1,66,3,66,1214,8,66,1,66,3,66,1217,8,66,1,66,3,
        66,1220,8,66,1,66,1,66,3,66,1224,8,66,1,67,1,67,3,67,1228,8,67,1,
        68,1,68,3,68,1232,8,68,1,68,1,68,3,68,1236,8,68,1,68,1,68,3,68,1240,
        8,68,1,68,3,68,1243,8,68,1,68,5,68,1246,8,68,10,68,12,68,1249,9,
        68,1,69,1,69,3,69,1253,8,69,1,69,5,69,1256,8,69,10,69,12,69,1259,
        9,69,1,70,1,70,3,70,1263,8,70,1,70,1,70,1,71,1,71,3,71,1269,8,71,
        1,71,1,71,3,71,1273,8,71,3,71,1275,8,71,1,71,1,71,3,71,1279,8,71,
        1,71,1,71,3,71,1283,8,71,3,71,1285,8,71,3,71,1287,8,71,1,72,1,72,
        1,73,1,73,1,74,1,74,3,74,1295,8,74,1,74,4,74,1298,8,74,11,74,12,
        74,1299,1,75,1,75,1,76,1,76,1,76,1,76,1,76,5,76,1309,8,76,10,76,
        12,76,1312,9,76,1,77,1,77,1,77,1,77,1,77,5,77,1319,8,77,10,77,12,
        77,1322,9,77,1,78,1,78,1,78,1,78,1,78,5,78,1329,8,78,10,78,12,78,
        1332,9,78,1,79,1,79,3,79,1336,8,79,5,79,1338,8,79,10,79,12,79,1341,
        9,79,1,79,1,79,1,80,1,80,3,80,1347,8,80,1,80,5,80,1350,8,80,10,80,
        12,80,1353,9,80,1,81,1,81,3,81,1357,8,81,1,81,1,81,1,81,3,81,1362,
        8,81,1,81,1,81,1,81,3,81,1367,8,81,1,81,1,81,1,81,3,81,1372,8,81,
        1,81,1,81,1,81,3,81,1377,8,81,1,81,1,81,1,81,3,81,1382,8,81,1,81,
        3,81,1385,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        3,82,1397,8,82,1,82,3,82,1400,8,82,1,82,1,82,1,83,1,83,1,83,3,83,
        1407,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,3,84,1421,8,84,1,85,1,85,3,85,1425,8,85,1,85,1,85,3,85,1429,
        8,85,1,85,1,85,3,85,1433,8,85,1,85,1,85,3,85,1437,8,85,1,85,5,85,
        1440,8,85,10,85,12,85,1443,9,85,1,86,1,86,3,86,1447,8,86,1,86,1,
        86,3,86,1451,8,86,1,86,1,86,3,86,1455,8,86,1,86,1,86,3,86,1459,8,
        86,1,86,1,86,3,86,1463,8,86,1,86,1,86,3,86,1467,8,86,1,86,5,86,1470,
        8,86,10,86,12,86,1473,9,86,1,87,1,87,3,87,1477,8,87,1,87,1,87,3,
        87,1481,8,87,1,87,5,87,1484,8,87,10,87,12,87,1487,9,87,1,88,1,88,
        1,88,3,88,1492,8,88,1,88,3,88,1495,8,88,1,89,1,89,3,89,1499,8,89,
        1,89,5,89,1502,8,89,10,89,12,89,1505,9,89,1,89,3,89,1508,8,89,1,
        89,3,89,1511,8,89,1,90,1,90,3,90,1515,8,90,1,90,1,90,1,91,1,91,1,
        91,1,91,1,91,3,91,1524,8,91,1,91,1,91,3,91,1528,8,91,1,91,1,91,3,
        91,1532,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1543,
        8,91,1,92,1,92,3,92,1547,8,92,1,92,4,92,1550,8,92,11,92,12,92,1551,
        1,92,1,92,3,92,1556,8,92,1,92,1,92,3,92,1560,8,92,1,92,4,92,1563,
        8,92,11,92,12,92,1564,3,92,1567,8,92,1,92,3,92,1570,8,92,1,92,1,
        92,3,92,1574,8,92,1,92,3,92,1577,8,92,1,92,3,92,1580,8,92,1,92,1,
        92,1,93,1,93,3,93,1586,8,93,1,93,1,93,3,93,1590,8,93,1,93,1,93,3,
        93,1594,8,93,1,93,1,93,1,94,1,94,3,94,1600,8,94,1,94,1,94,3,94,1604,
        8,94,1,94,1,94,3,94,1608,8,94,1,94,3,94,1611,8,94,1,94,3,94,1614,
        8,94,1,94,1,94,1,95,1,95,3,95,1620,8,95,1,95,1,95,3,95,1624,8,95,
        1,95,1,95,3,95,1628,8,95,3,95,1630,8,95,1,95,1,95,3,95,1634,8,95,
        1,95,1,95,3,95,1638,8,95,3,95,1640,8,95,1,95,1,95,3,95,1644,8,95,
        1,95,1,95,3,95,1648,8,95,1,95,1,95,1,96,1,96,3,96,1654,8,96,1,96,
        1,96,3,96,1658,8,96,1,96,1,96,3,96,1662,8,96,1,96,1,96,1,96,1,96,
        3,96,1668,8,96,1,96,1,96,3,96,1672,8,96,1,96,1,96,3,96,1676,8,96,
        1,96,1,96,1,96,1,96,3,96,1682,8,96,1,96,1,96,3,96,1686,8,96,1,96,
        1,96,3,96,1690,8,96,1,96,1,96,1,96,1,96,3,96,1696,8,96,1,96,1,96,
        3,96,1700,8,96,1,96,1,96,3,96,1704,8,96,1,96,1,96,3,96,1708,8,96,
        1,97,1,97,3,97,1712,8,97,1,97,3,97,1715,8,97,1,98,1,98,1,99,1,99,
        3,99,1721,8,99,1,99,1,99,3,99,1725,8,99,1,99,1,99,1,100,1,100,1,
        100,1,100,1,100,1,100,1,101,1,101,3,101,1737,8,101,1,101,1,101,3,
        101,1741,8,101,1,101,1,101,3,101,1745,8,101,3,101,1747,8,101,1,101,
        1,101,3,101,1751,8,101,1,101,1,101,3,101,1755,8,101,1,101,1,101,
        3,101,1759,8,101,5,101,1761,8,101,10,101,12,101,1764,9,101,3,101,
        1766,8,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,3,103,1775,
        8,103,1,103,1,103,3,103,1779,8,103,1,103,1,103,1,103,3,103,1784,
        8,103,1,103,3,103,1787,8,103,3,103,1789,8,103,1,103,3,103,1792,8,
        103,1,103,1,103,1,104,1,104,3,104,1798,8,104,1,104,1,104,3,104,1802,
        8,104,1,104,1,104,3,104,1806,8,104,1,104,1,104,3,104,1810,8,104,
        1,104,1,104,3,104,1814,8,104,5,104,1816,8,104,10,104,12,104,1819,
        9,104,3,104,1821,8,104,1,104,1,104,1,105,1,105,1,106,1,106,1,107,
        1,107,1,107,1,108,1,108,1,108,5,108,1835,8,108,10,108,12,108,1838,
        9,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1848,
        8,110,1,111,1,111,1,112,1,112,3,112,1854,8,112,1,113,1,113,1,114,
        1,114,1,115,1,115,3,115,1862,8,115,1,115,1,115,3,115,1866,8,115,
        1,115,1,115,3,115,1870,8,115,1,115,1,115,3,115,1874,8,115,5,115,
        1876,8,115,10,115,12,115,1879,9,115,3,115,1881,8,115,1,115,1,115,
        1,116,1,116,3,116,1887,8,116,1,116,1,116,3,116,1891,8,116,1,116,
        1,116,3,116,1895,8,116,1,116,1,116,3,116,1899,8,116,1,116,1,116,
        3,116,1903,8,116,1,116,1,116,3,116,1907,8,116,1,116,1,116,3,116,
        1911,8,116,1,116,1,116,3,116,1915,8,116,5,116,1917,8,116,10,116,
        12,116,1920,9,116,3,116,1922,8,116,1,116,1,116,1,117,1,117,1,118,
        1,118,1,118,3,118,1931,8,118,1,119,1,119,3,119,1935,8,119,1,120,
        1,120,1,121,1,121,1,122,1,122,1,122,0,0,123,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,0,11,1,0,54,55,6,0,48,48,93,93,99,101,
        108,108,129,131,134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,
        0,78,81,1,0,21,22,1,0,103,104,1,0,105,107,1,0,115,116,2,0,17,17,
        27,30,2,0,18,18,31,34,2,0,22,22,35,45,2225,0,249,1,0,0,0,2,253,1,
        0,0,0,4,281,1,0,0,0,6,398,1,0,0,0,8,400,1,0,0,0,10,427,1,0,0,0,12,
        431,1,0,0,0,14,460,1,0,0,0,16,462,1,0,0,0,18,468,1,0,0,0,20,484,
        1,0,0,0,22,507,1,0,0,0,24,509,1,0,0,0,26,523,1,0,0,0,28,533,1,0,
        0,0,30,565,1,0,0,0,32,567,1,0,0,0,34,591,1,0,0,0,36,602,1,0,0,0,
        38,614,1,0,0,0,40,647,1,0,0,0,42,656,1,0,0,0,44,666,1,0,0,0,46,673,
        1,0,0,0,48,685,1,0,0,0,50,707,1,0,0,0,52,717,1,0,0,0,54,722,1,0,
        0,0,56,749,1,0,0,0,58,751,1,0,0,0,60,753,1,0,0,0,62,756,1,0,0,0,
        64,770,1,0,0,0,66,772,1,0,0,0,68,794,1,0,0,0,70,798,1,0,0,0,72,835,
        1,0,0,0,74,838,1,0,0,0,76,850,1,0,0,0,78,869,1,0,0,0,80,871,1,0,
        0,0,82,881,1,0,0,0,84,903,1,0,0,0,86,905,1,0,0,0,88,911,1,0,0,0,
        90,929,1,0,0,0,92,949,1,0,0,0,94,951,1,0,0,0,96,962,1,0,0,0,98,979,
        1,0,0,0,100,1004,1,0,0,0,102,1008,1,0,0,0,104,1016,1,0,0,0,106,1023,
        1,0,0,0,108,1067,1,0,0,0,110,1076,1,0,0,0,112,1078,1,0,0,0,114,1093,
        1,0,0,0,116,1097,1,0,0,0,118,1101,1,0,0,0,120,1108,1,0,0,0,122,1112,
        1,0,0,0,124,1126,1,0,0,0,126,1142,1,0,0,0,128,1144,1,0,0,0,130,1153,
        1,0,0,0,132,1223,1,0,0,0,134,1227,1,0,0,0,136,1229,1,0,0,0,138,1250,
        1,0,0,0,140,1260,1,0,0,0,142,1266,1,0,0,0,144,1288,1,0,0,0,146,1290,
        1,0,0,0,148,1292,1,0,0,0,150,1301,1,0,0,0,152,1303,1,0,0,0,154,1313,
        1,0,0,0,156,1323,1,0,0,0,158,1339,1,0,0,0,160,1344,1,0,0,0,162,1384,
        1,0,0,0,164,1396,1,0,0,0,166,1403,1,0,0,0,168,1420,1,0,0,0,170,1422,
        1,0,0,0,172,1444,1,0,0,0,174,1474,1,0,0,0,176,1494,1,0,0,0,178,1496,
        1,0,0,0,180,1512,1,0,0,0,182,1542,1,0,0,0,184,1566,1,0,0,0,186,1583,
        1,0,0,0,188,1597,1,0,0,0,190,1617,1,0,0,0,192,1707,1,0,0,0,194,1709,
        1,0,0,0,196,1716,1,0,0,0,198,1718,1,0,0,0,200,1728,1,0,0,0,202,1734,
        1,0,0,0,204,1769,1,0,0,0,206,1772,1,0,0,0,208,1795,1,0,0,0,210,1824,
        1,0,0,0,212,1826,1,0,0,0,214,1828,1,0,0,0,216,1836,1,0,0,0,218,1839,
        1,0,0,0,220,1847,1,0,0,0,222,1849,1,0,0,0,224,1853,1,0,0,0,226,1855,
        1,0,0,0,228,1857,1,0,0,0,230,1859,1,0,0,0,232,1884,1,0,0,0,234,1925,
        1,0,0,0,236,1927,1,0,0,0,238,1934,1,0,0,0,240,1936,1,0,0,0,242,1938,
        1,0,0,0,244,1940,1,0,0,0,246,250,3,66,33,0,247,250,3,96,48,0,248,
        250,3,20,10,0,249,246,1,0,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,
        1,1,0,0,0,251,252,5,58,0,0,252,254,5,135,0,0,253,251,1,0,0,0,253,
        254,1,0,0,0,254,255,1,0,0,0,255,257,5,59,0,0,256,258,5,135,0,0,257,
        256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,267,3,122,61,0,260,
        262,5,135,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,265,1,0,0,0,263,
        266,3,16,8,0,264,266,3,18,9,0,265,263,1,0,0,0,265,264,1,0,0,0,266,
        268,1,0,0,0,267,261,1,0,0,0,267,268,1,0,0,0,268,273,1,0,0,0,269,
        271,5,135,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,
        274,3,120,60,0,273,270,1,0,0,0,273,274,1,0,0,0,274,3,1,0,0,0,275,
        282,3,86,43,0,276,282,3,82,41,0,277,282,3,12,6,0,278,282,3,88,44,
        0,279,282,3,90,45,0,280,282,3,8,4,0,281,275,1,0,0,0,281,276,1,0,
        0,0,281,277,1,0,0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,
        0,0,282,287,1,0,0,0,283,285,5,135,0,0,284,283,1,0,0,0,284,285,1,
        0,0,0,285,286,1,0,0,0,286,288,3,16,8,0,287,284,1,0,0,0,287,288,1,
        0,0,0,288,5,1,0,0,0,289,291,3,218,109,0,290,292,5,135,0,0,291,290,
        1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,3,54,27,0,294,399,
        1,0,0,0,295,300,3,218,109,0,296,298,5,135,0,0,297,296,1,0,0,0,297,
        298,1,0,0,0,298,299,1,0,0,0,299,301,3,54,27,0,300,297,1,0,0,0,300,
        301,1,0,0,0,301,302,1,0,0,0,302,303,5,1,0,0,303,305,3,234,117,0,
        304,306,5,135,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,
        0,307,308,3,54,27,0,308,399,1,0,0,0,309,314,3,218,109,0,310,312,
        5,135,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,
        3,54,27,0,314,311,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,
        5,1,0,0,317,322,3,234,117,0,318,320,5,135,0,0,319,318,1,0,0,0,319,
        320,1,0,0,0,320,321,1,0,0,0,321,323,3,54,27,0,322,319,1,0,0,0,322,
        323,1,0,0,0,323,325,1,0,0,0,324,326,5,135,0,0,325,324,1,0,0,0,325,
        326,1,0,0,0,326,327,1,0,0,0,327,329,5,47,0,0,328,330,5,135,0,0,329,
        328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,3,54,27,0,332,
        399,1,0,0,0,333,338,3,218,109,0,334,336,5,135,0,0,335,334,1,0,0,
        0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,3,54,27,0,338,335,1,0,
        0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,5,1,0,0,341,346,3,234,
        117,0,342,344,5,135,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,
        1,0,0,0,345,347,3,54,27,0,346,343,1,0,0,0,346,347,1,0,0,0,347,349,
        1,0,0,0,348,350,5,135,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,
        1,0,0,0,351,353,5,2,0,0,352,354,5,135,0,0,353,352,1,0,0,0,353,354,
        1,0,0,0,354,355,1,0,0,0,355,360,3,150,75,0,356,358,5,135,0,0,357,
        356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,361,3,54,27,0,360,
        357,1,0,0,0,360,361,1,0,0,0,361,399,1,0,0,0,362,364,3,148,74,0,363,
        365,5,135,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,
        368,5,2,0,0,367,369,5,135,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,
        370,1,0,0,0,370,371,3,150,75,0,371,399,1,0,0,0,372,374,3,218,109,
        0,373,375,5,135,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,1,0,
        0,0,376,378,5,2,0,0,377,379,5,135,0,0,378,377,1,0,0,0,378,379,1,
        0,0,0,379,380,1,0,0,0,380,381,3,150,75,0,381,399,1,0,0,0,382,384,
        3,218,109,0,383,385,5,135,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
        386,1,0,0,0,386,388,5,3,0,0,387,389,5,135,0,0,388,387,1,0,0,0,388,
        389,1,0,0,0,389,390,1,0,0,0,390,391,3,150,75,0,391,399,1,0,0,0,392,
        394,3,218,109,0,393,395,5,135,0,0,394,393,1,0,0,0,394,395,1,0,0,
        0,395,396,1,0,0,0,396,397,3,138,69,0,397,399,1,0,0,0,398,289,1,0,
        0,0,398,295,1,0,0,0,398,309,1,0,0,0,398,333,1,0,0,0,398,362,1,0,
        0,0,398,372,1,0,0,0,398,382,1,0,0,0,398,392,1,0,0,0,399,7,1,0,0,
        0,400,402,5,53,0,0,401,403,5,135,0,0,402,401,1,0,0,0,402,403,1,0,
        0,0,403,404,1,0,0,0,404,415,3,10,5,0,405,407,5,135,0,0,406,405,1,
        0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,410,5,4,0,0,409,411,5,
        135,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,
        3,10,5,0,413,406,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,
        1,0,0,0,416,9,1,0,0,0,417,415,1,0,0,0,418,419,3,150,75,0,419,420,
        5,1,0,0,420,422,3,234,117,0,421,423,5,135,0,0,422,421,1,0,0,0,422,
        423,1,0,0,0,423,424,1,0,0,0,424,425,5,47,0,0,425,428,1,0,0,0,426,
        428,3,150,75,0,427,418,1,0,0,0,427,426,1,0,0,0,428,11,1,0,0,0,429,
        430,5,66,0,0,430,432,5,135,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,
        433,1,0,0,0,433,435,5,67,0,0,434,436,5,135,0,0,435,434,1,0,0,0,435,
        436,1,0,0,0,436,437,1,0,0,0,437,448,3,14,7,0,438,440,5,135,0,0,439,
        438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,443,5,4,0,0,442,
        444,5,135,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
        447,3,14,7,0,446,439,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,
        449,1,0,0,0,449,13,1,0,0,0,450,448,1,0,0,0,451,452,3,150,75,0,452,
        453,5,1,0,0,453,455,3,234,117,0,454,456,5,135,0,0,455,454,1,0,0,
        0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,5,47,0,0,458,461,1,0,0,
        0,459,461,3,150,75,0,460,451,1,0,0,0,460,459,1,0,0,0,461,15,1,0,
        0,0,462,464,5,49,0,0,463,465,5,135,0,0,464,463,1,0,0,0,464,465,1,
        0,0,0,465,466,1,0,0,0,466,467,3,150,75,0,467,17,1,0,0,0,468,470,
        5,51,0,0,469,471,5,135,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,
        1,0,0,0,472,473,3,150,75,0,473,19,1,0,0,0,474,476,5,50,0,0,475,477,
        5,135,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,485,
        3,150,75,0,479,481,5,52,0,0,480,482,5,135,0,0,481,480,1,0,0,0,481,
        482,1,0,0,0,482,483,1,0,0,0,483,485,3,150,75,0,484,474,1,0,0,0,484,
        479,1,0,0,0,485,21,1,0,0,0,486,488,3,218,109,0,487,489,5,135,0,0,
        488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,492,5,2,0,0,
        491,493,5,135,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,
        0,494,495,3,24,12,0,495,508,1,0,0,0,496,498,3,218,109,0,497,499,
        5,135,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,502,
        5,2,0,0,501,503,5,135,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,
        1,0,0,0,504,505,3,124,62,0,505,508,1,0,0,0,506,508,3,124,62,0,507,
        486,1,0,0,0,507,496,1,0,0,0,507,506,1,0,0,0,508,23,1,0,0,0,509,511,
        3,204,102,0,510,512,5,135,0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,
        513,1,0,0,0,513,515,5,5,0,0,514,516,5,135,0,0,515,514,1,0,0,0,515,
        516,1,0,0,0,516,517,1,0,0,0,517,519,3,26,13,0,518,520,5,135,0,0,
        519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,522,5,6,0,0,
        522,25,1,0,0,0,523,525,3,28,14,0,524,526,5,135,0,0,525,524,1,0,0,
        0,525,526,1,0,0,0,526,527,1,0,0,0,527,529,3,132,66,0,528,530,5,135,
        0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,3,28,
        14,0,532,27,1,0,0,0,533,535,5,5,0,0,534,536,5,135,0,0,535,534,1,
        0,0,0,535,536,1,0,0,0,536,541,1,0,0,0,537,539,3,218,109,0,538,540,
        5,135,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,537,
        1,0,0,0,541,542,1,0,0,0,542,547,1,0,0,0,543,545,3,138,69,0,544,546,
        5,135,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,543,
        1,0,0,0,547,548,1,0,0,0,548,553,1,0,0,0,549,551,3,54,27,0,550,552,
        5,135,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,549,
        1,0,0,0,553,554,1,0,0,0,554,559,1,0,0,0,555,557,3,30,15,0,556,558,
        5,135,0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,555,
        1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,5,6,0,0,562,29,1,
        0,0,0,563,566,3,32,16,0,564,566,3,236,118,0,565,563,1,0,0,0,565,
        564,1,0,0,0,566,31,1,0,0,0,567,569,5,7,0,0,568,570,5,135,0,0,569,
        568,1,0,0,0,569,570,1,0,0,0,570,587,1,0,0,0,571,572,3,34,17,0,572,
        573,5,8,0,0,573,584,3,36,18,0,574,576,5,4,0,0,575,577,5,135,0,0,
        576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,3,34,17,
        0,579,580,5,8,0,0,580,581,3,36,18,0,581,583,1,0,0,0,582,574,1,0,
        0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,588,1,0,
        0,0,586,584,1,0,0,0,587,571,1,0,0,0,587,588,1,0,0,0,588,589,1,0,
        0,0,589,590,5,9,0,0,590,33,1,0,0,0,591,593,3,234,117,0,592,594,5,
        135,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,599,1,0,0,0,595,597,
        3,54,27,0,596,598,5,135,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,
        600,1,0,0,0,599,595,1,0,0,0,599,600,1,0,0,0,600,35,1,0,0,0,601,603,
        5,135,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,
        3,150,75,0,605,607,5,135,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
        612,1,0,0,0,608,610,3,54,27,0,609,611,5,135,0,0,610,609,1,0,0,0,
        610,611,1,0,0,0,611,613,1,0,0,0,612,608,1,0,0,0,612,613,1,0,0,0,
        613,37,1,0,0,0,614,616,5,10,0,0,615,617,5,135,0,0,616,615,1,0,0,
        0,616,617,1,0,0,0,617,622,1,0,0,0,618,620,3,218,109,0,619,621,5,
        135,0,0,620,619,1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,618,
        1,0,0,0,622,623,1,0,0,0,623,628,1,0,0,0,624,626,3,136,68,0,625,627,
        5,135,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,624,
        1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,632,3,142,71,0,631,630,
        1,0,0,0,631,632,1,0,0,0,632,637,1,0,0,0,633,635,3,54,27,0,634,636,
        5,135,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,633,
        1,0,0,0,637,638,1,0,0,0,638,643,1,0,0,0,639,641,3,134,67,0,640,642,
        5,135,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,639,
        1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,646,5,11,0,0,646,39,
        1,0,0,0,647,652,3,170,85,0,648,653,3,52,26,0,649,653,3,164,82,0,
        650,653,3,166,83,0,651,653,3,168,84,0,652,648,1,0,0,0,652,649,1,
        0,0,0,652,650,1,0,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,41,1,0,
        0,0,654,657,3,178,89,0,655,657,3,48,24,0,656,654,1,0,0,0,656,655,
        1,0,0,0,657,662,1,0,0,0,658,661,3,44,22,0,659,661,3,46,23,0,660,
        658,1,0,0,0,660,659,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,
        663,1,0,0,0,663,43,1,0,0,0,664,662,1,0,0,0,665,667,5,135,0,0,666,
        665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,669,5,10,0,0,669,
        670,3,150,75,0,670,671,5,11,0,0,671,45,1,0,0,0,672,674,5,135,0,0,
        673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,5,10,0,0,
        676,678,3,150,75,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,
        0,679,681,5,12,0,0,680,682,3,150,75,0,681,680,1,0,0,0,681,682,1,
        0,0,0,682,683,1,0,0,0,683,684,5,11,0,0,684,47,1,0,0,0,685,700,3,
        182,91,0,686,688,5,135,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,
        1,0,0,0,689,691,3,180,90,0,690,687,1,0,0,0,691,692,1,0,0,0,692,690,
        1,0,0,0,692,693,1,0,0,0,693,698,1,0,0,0,694,696,5,135,0,0,695,694,
        1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,5,47,0,0,698,695,
        1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,690,1,0,0,0,700,701,
        1,0,0,0,701,703,1,0,0,0,702,704,5,135,0,0,703,702,1,0,0,0,703,704,
        1,0,0,0,704,705,1,0,0,0,705,706,3,50,25,0,706,49,1,0,0,0,707,714,
        5,46,0,0,708,710,5,135,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,
        1,0,0,0,711,713,3,180,90,0,712,709,1,0,0,0,713,716,1,0,0,0,714,712,
        1,0,0,0,714,715,1,0,0,0,715,51,1,0,0,0,716,714,1,0,0,0,717,718,5,
        135,0,0,718,719,7,0,0,0,719,720,5,135,0,0,720,721,3,170,85,0,721,
        53,1,0,0,0,722,724,5,46,0,0,723,725,5,135,0,0,724,723,1,0,0,0,724,
        725,1,0,0,0,725,726,1,0,0,0,726,728,5,5,0,0,727,729,5,135,0,0,728,
        727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,732,3,56,28,0,731,
        733,5,135,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,
        736,5,4,0,0,735,737,5,135,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,
        740,1,0,0,0,738,741,3,56,28,0,739,741,5,48,0,0,740,738,1,0,0,0,740,
        739,1,0,0,0,741,743,1,0,0,0,742,744,5,135,0,0,743,742,1,0,0,0,743,
        744,1,0,0,0,744,745,1,0,0,0,745,746,5,6,0,0,746,55,1,0,0,0,747,750,
        5,117,0,0,748,750,3,232,116,0,749,747,1,0,0,0,749,748,1,0,0,0,750,
        57,1,0,0,0,751,752,7,1,0,0,752,59,1,0,0,0,753,754,7,2,0,0,754,61,
        1,0,0,0,755,757,5,135,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,
        1,0,0,0,758,763,3,64,32,0,759,761,5,135,0,0,760,759,1,0,0,0,760,
        761,1,0,0,0,761,762,1,0,0,0,762,764,5,13,0,0,763,760,1,0,0,0,763,
        764,1,0,0,0,764,766,1,0,0,0,765,767,5,135,0,0,766,765,1,0,0,0,766,
        767,1,0,0,0,767,768,1,0,0,0,768,769,5,0,0,1,769,63,1,0,0,0,770,771,
        3,0,0,0,771,65,1,0,0,0,772,779,3,70,35,0,773,775,5,135,0,0,774,773,
        1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,778,3,68,34,0,777,774,
        1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,67,1,
        0,0,0,781,779,1,0,0,0,782,783,5,56,0,0,783,784,5,135,0,0,784,786,
        5,57,0,0,785,787,5,135,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,
        1,0,0,0,788,795,3,70,35,0,789,791,5,56,0,0,790,792,5,135,0,0,791,
        790,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,795,3,70,35,0,794,
        782,1,0,0,0,794,789,1,0,0,0,795,69,1,0,0,0,796,799,3,72,36,0,797,
        799,3,74,37,0,798,796,1,0,0,0,798,797,1,0,0,0,799,71,1,0,0,0,800,
        802,3,78,39,0,801,803,5,135,0,0,802,801,1,0,0,0,802,803,1,0,0,0,
        803,805,1,0,0,0,804,800,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,
        806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,836,3,104,52,
        0,810,812,3,78,39,0,811,813,5,135,0,0,812,811,1,0,0,0,812,813,1,
        0,0,0,813,815,1,0,0,0,814,810,1,0,0,0,815,818,1,0,0,0,816,814,1,
        0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,816,1,0,0,0,819,826,3,
        4,2,0,820,822,5,135,0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,823,
        1,0,0,0,823,825,3,4,2,0,824,821,1,0,0,0,825,828,1,0,0,0,826,824,
        1,0,0,0,826,827,1,0,0,0,827,833,1,0,0,0,828,826,1,0,0,0,829,831,
        5,135,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,834,
        3,104,52,0,833,830,1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,806,
        1,0,0,0,835,816,1,0,0,0,836,73,1,0,0,0,837,839,3,76,38,0,838,837,
        1,0,0,0,839,840,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,842,
        1,0,0,0,842,843,3,72,36,0,843,75,1,0,0,0,844,846,3,78,39,0,845,847,
        5,135,0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,844,
        1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,859,
        1,0,0,0,852,850,1,0,0,0,853,855,3,4,2,0,854,856,5,135,0,0,855,854,
        1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,853,1,0,0,0,858,861,
        1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,862,1,0,0,0,861,859,
        1,0,0,0,862,864,3,102,51,0,863,865,5,135,0,0,864,863,1,0,0,0,864,
        865,1,0,0,0,865,77,1,0,0,0,866,870,3,2,1,0,867,870,3,80,40,0,868,
        870,3,94,47,0,869,866,1,0,0,0,869,867,1,0,0,0,869,868,1,0,0,0,870,
        79,1,0,0,0,871,873,5,60,0,0,872,874,5,135,0,0,873,872,1,0,0,0,873,
        874,1,0,0,0,874,875,1,0,0,0,875,876,3,150,75,0,876,877,5,135,0,0,
        877,878,5,61,0,0,878,879,5,135,0,0,879,880,3,218,109,0,880,81,1,
        0,0,0,881,883,5,62,0,0,882,884,5,135,0,0,883,882,1,0,0,0,883,884,
        1,0,0,0,884,885,1,0,0,0,885,890,3,22,11,0,886,887,5,135,0,0,887,
        889,3,84,42,0,888,886,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,
        891,1,0,0,0,891,83,1,0,0,0,892,890,1,0,0,0,893,894,5,63,0,0,894,
        895,5,135,0,0,895,896,5,59,0,0,896,897,5,135,0,0,897,904,3,88,44,
        0,898,899,5,63,0,0,899,900,5,135,0,0,900,901,5,64,0,0,901,902,5,
        135,0,0,902,904,3,88,44,0,903,893,1,0,0,0,903,898,1,0,0,0,904,85,
        1,0,0,0,905,907,5,64,0,0,906,908,5,135,0,0,907,906,1,0,0,0,907,908,
        1,0,0,0,908,909,1,0,0,0,909,910,3,122,61,0,910,87,1,0,0,0,911,913,
        5,65,0,0,912,914,5,135,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,
        1,0,0,0,915,926,3,6,3,0,916,918,5,135,0,0,917,916,1,0,0,0,917,918,
        1,0,0,0,918,919,1,0,0,0,919,921,5,4,0,0,920,922,5,135,0,0,921,920,
        1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,925,3,6,3,0,924,917,
        1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,89,1,
        0,0,0,928,926,1,0,0,0,929,930,5,68,0,0,930,931,5,135,0,0,931,942,
        3,92,46,0,932,934,5,135,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,
        935,1,0,0,0,935,937,5,4,0,0,936,938,5,135,0,0,937,936,1,0,0,0,937,
        938,1,0,0,0,938,939,1,0,0,0,939,941,3,92,46,0,940,933,1,0,0,0,941,
        944,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,91,1,0,0,0,944,942,
        1,0,0,0,945,946,3,218,109,0,946,947,3,138,69,0,947,950,1,0,0,0,948,
        950,3,148,74,0,949,945,1,0,0,0,949,948,1,0,0,0,950,93,1,0,0,0,951,
        952,5,69,0,0,952,953,5,135,0,0,953,960,3,208,104,0,954,956,5,135,
        0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,958,5,70,
        0,0,958,959,5,135,0,0,959,961,3,98,49,0,960,955,1,0,0,0,960,961,
        1,0,0,0,961,95,1,0,0,0,962,963,5,69,0,0,963,966,5,135,0,0,964,967,
        3,208,104,0,965,967,3,210,105,0,966,964,1,0,0,0,966,965,1,0,0,0,
        967,977,1,0,0,0,968,970,5,135,0,0,969,968,1,0,0,0,969,970,1,0,0,
        0,970,971,1,0,0,0,971,972,5,70,0,0,972,975,5,135,0,0,973,976,5,14,
        0,0,974,976,3,98,49,0,975,973,1,0,0,0,975,974,1,0,0,0,976,978,1,
        0,0,0,977,969,1,0,0,0,977,978,1,0,0,0,978,97,1,0,0,0,979,990,3,100,
        50,0,980,982,5,135,0,0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,
        0,0,0,983,985,5,4,0,0,984,986,5,135,0,0,985,984,1,0,0,0,985,986,
        1,0,0,0,986,987,1,0,0,0,987,989,3,100,50,0,988,981,1,0,0,0,989,992,
        1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,997,1,0,0,0,992,990,
        1,0,0,0,993,995,5,135,0,0,994,993,1,0,0,0,994,995,1,0,0,0,995,996,
        1,0,0,0,996,998,3,120,60,0,997,994,1,0,0,0,997,998,1,0,0,0,998,99,
        1,0,0,0,999,1000,3,212,106,0,1000,1001,5,135,0,0,1001,1002,5,61,
        0,0,1002,1003,5,135,0,0,1003,1005,1,0,0,0,1004,999,1,0,0,0,1004,
        1005,1,0,0,0,1005,1006,1,0,0,0,1006,1007,3,218,109,0,1007,101,1,
        0,0,0,1008,1009,5,71,0,0,1009,1014,3,106,53,0,1010,1012,5,135,0,
        0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1015,
        3,120,60,0,1014,1011,1,0,0,0,1014,1015,1,0,0,0,1015,103,1,0,0,0,
        1016,1017,5,72,0,0,1017,1018,3,106,53,0,1018,105,1,0,0,0,1019,1021,
        5,135,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,
        1022,1024,5,73,0,0,1023,1020,1,0,0,0,1023,1024,1,0,0,0,1024,1025,
        1,0,0,0,1025,1026,5,135,0,0,1026,1029,3,108,54,0,1027,1028,5,135,
        0,0,1028,1030,3,112,56,0,1029,1027,1,0,0,0,1029,1030,1,0,0,0,1030,
        1033,1,0,0,0,1031,1032,5,135,0,0,1032,1034,3,114,57,0,1033,1031,
        1,0,0,0,1033,1034,1,0,0,0,1034,1037,1,0,0,0,1035,1036,5,135,0,0,
        1036,1038,3,116,58,0,1037,1035,1,0,0,0,1037,1038,1,0,0,0,1038,107,
        1,0,0,0,1039,1050,5,14,0,0,1040,1042,5,135,0,0,1041,1040,1,0,0,0,
        1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1045,5,4,0,0,1044,1046,
        5,135,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,
        1047,1049,3,110,55,0,1048,1041,1,0,0,0,1049,1052,1,0,0,0,1050,1048,
        1,0,0,0,1050,1051,1,0,0,0,1051,1068,1,0,0,0,1052,1050,1,0,0,0,1053,
        1064,3,110,55,0,1054,1056,5,135,0,0,1055,1054,1,0,0,0,1055,1056,
        1,0,0,0,1056,1057,1,0,0,0,1057,1059,5,4,0,0,1058,1060,5,135,0,0,
        1059,1058,1,0,0,0,1059,1060,1,0,0,0,1060,1061,1,0,0,0,1061,1063,
        3,110,55,0,1062,1055,1,0,0,0,1063,1066,1,0,0,0,1064,1062,1,0,0,0,
        1064,1065,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1067,1039,
        1,0,0,0,1067,1053,1,0,0,0,1068,109,1,0,0,0,1069,1070,3,150,75,0,
        1070,1071,5,135,0,0,1071,1072,5,61,0,0,1072,1073,5,135,0,0,1073,
        1074,3,218,109,0,1074,1077,1,0,0,0,1075,1077,3,150,75,0,1076,1069,
        1,0,0,0,1076,1075,1,0,0,0,1077,111,1,0,0,0,1078,1079,5,74,0,0,1079,
        1080,5,135,0,0,1080,1081,5,75,0,0,1081,1082,5,135,0,0,1082,1090,
        3,118,59,0,1083,1085,5,4,0,0,1084,1086,5,135,0,0,1085,1084,1,0,0,
        0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,3,118,59,0,1088,
        1083,1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,
        0,1091,113,1,0,0,0,1092,1090,1,0,0,0,1093,1094,5,76,0,0,1094,1095,
        5,135,0,0,1095,1096,3,150,75,0,1096,115,1,0,0,0,1097,1098,5,77,0,
        0,1098,1099,5,135,0,0,1099,1100,3,150,75,0,1100,117,1,0,0,0,1101,
        1106,3,150,75,0,1102,1104,5,135,0,0,1103,1102,1,0,0,0,1103,1104,
        1,0,0,0,1104,1105,1,0,0,0,1105,1107,7,3,0,0,1106,1103,1,0,0,0,1106,
        1107,1,0,0,0,1107,119,1,0,0,0,1108,1109,5,82,0,0,1109,1110,5,135,
        0,0,1110,1111,3,150,75,0,1111,121,1,0,0,0,1112,1123,3,22,11,0,1113,
        1115,5,135,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,
        0,0,1116,1118,5,4,0,0,1117,1119,5,135,0,0,1118,1117,1,0,0,0,1118,
        1119,1,0,0,0,1119,1120,1,0,0,0,1120,1122,3,22,11,0,1121,1114,1,0,
        0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,123,
        1,0,0,0,1125,1123,1,0,0,0,1126,1127,3,126,63,0,1127,125,1,0,0,0,
        1128,1135,3,28,14,0,1129,1131,5,135,0,0,1130,1129,1,0,0,0,1130,1131,
        1,0,0,0,1131,1132,1,0,0,0,1132,1134,3,130,65,0,1133,1130,1,0,0,0,
        1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1143,
        1,0,0,0,1137,1135,1,0,0,0,1138,1139,5,5,0,0,1139,1140,3,126,63,0,
        1140,1141,5,6,0,0,1141,1143,1,0,0,0,1142,1128,1,0,0,0,1142,1138,
        1,0,0,0,1143,127,1,0,0,0,1144,1149,3,28,14,0,1145,1147,5,135,0,0,
        1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,1148,1150,
        3,130,65,0,1149,1146,1,0,0,0,1150,1151,1,0,0,0,1151,1149,1,0,0,0,
        1151,1152,1,0,0,0,1152,129,1,0,0,0,1153,1155,3,132,66,0,1154,1156,
        5,135,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,
        1157,1158,3,28,14,0,1158,131,1,0,0,0,1159,1161,3,240,120,0,1160,
        1162,5,135,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,
        0,0,1163,1165,3,244,122,0,1164,1166,5,135,0,0,1165,1164,1,0,0,0,
        1165,1166,1,0,0,0,1166,1168,1,0,0,0,1167,1169,3,38,19,0,1168,1167,
        1,0,0,0,1168,1169,1,0,0,0,1169,1171,1,0,0,0,1170,1172,5,135,0,0,
        1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1175,
        3,244,122,0,1174,1176,5,135,0,0,1175,1174,1,0,0,0,1175,1176,1,0,
        0,0,1176,1177,1,0,0,0,1177,1178,3,242,121,0,1178,1224,1,0,0,0,1179,
        1181,3,240,120,0,1180,1182,5,135,0,0,1181,1180,1,0,0,0,1181,1182,
        1,0,0,0,1182,1183,1,0,0,0,1183,1185,3,244,122,0,1184,1186,5,135,
        0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,0,0,1187,1189,
        3,38,19,0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,1191,1,0,0,0,
        1190,1192,5,135,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,
        1,0,0,0,1193,1194,3,244,122,0,1194,1224,1,0,0,0,1195,1197,3,244,
        122,0,1196,1198,5,135,0,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,
        1200,1,0,0,0,1199,1201,3,38,19,0,1200,1199,1,0,0,0,1200,1201,1,0,
        0,0,1201,1203,1,0,0,0,1202,1204,5,135,0,0,1203,1202,1,0,0,0,1203,
        1204,1,0,0,0,1204,1205,1,0,0,0,1205,1207,3,244,122,0,1206,1208,5,
        135,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,
        1210,3,242,121,0,1210,1224,1,0,0,0,1211,1213,3,244,122,0,1212,1214,
        5,135,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,
        1215,1217,3,38,19,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1219,
        1,0,0,0,1218,1220,5,135,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,
        1220,1221,1,0,0,0,1221,1222,3,244,122,0,1222,1224,1,0,0,0,1223,1159,
        1,0,0,0,1223,1179,1,0,0,0,1223,1195,1,0,0,0,1223,1211,1,0,0,0,1224,
        133,1,0,0,0,1225,1228,3,232,116,0,1226,1228,3,236,118,0,1227,1225,
        1,0,0,0,1227,1226,1,0,0,0,1228,135,1,0,0,0,1229,1231,5,8,0,0,1230,
        1232,5,135,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,
        0,0,1233,1247,3,146,73,0,1234,1236,5,135,0,0,1235,1234,1,0,0,0,1235,
        1236,1,0,0,0,1236,1237,1,0,0,0,1237,1239,5,15,0,0,1238,1240,5,8,
        0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,1243,
        5,135,0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,
        1244,1246,3,146,73,0,1245,1235,1,0,0,0,1246,1249,1,0,0,0,1247,1245,
        1,0,0,0,1247,1248,1,0,0,0,1248,137,1,0,0,0,1249,1247,1,0,0,0,1250,
        1257,3,140,70,0,1251,1253,5,135,0,0,1252,1251,1,0,0,0,1252,1253,
        1,0,0,0,1253,1254,1,0,0,0,1254,1256,3,140,70,0,1255,1252,1,0,0,0,
        1256,1259,1,0,0,0,1257,1255,1,0,0,0,1257,1258,1,0,0,0,1258,139,1,
        0,0,0,1259,1257,1,0,0,0,1260,1262,5,8,0,0,1261,1263,5,135,0,0,1262,
        1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,3,144,
        72,0,1265,141,1,0,0,0,1266,1268,5,14,0,0,1267,1269,5,135,0,0,1268,
        1267,1,0,0,0,1268,1269,1,0,0,0,1269,1274,1,0,0,0,1270,1272,3,226,
        113,0,1271,1273,5,135,0,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,
        1275,1,0,0,0,1274,1270,1,0,0,0,1274,1275,1,0,0,0,1275,1286,1,0,0,
        0,1276,1278,5,12,0,0,1277,1279,5,135,0,0,1278,1277,1,0,0,0,1278,
        1279,1,0,0,0,1279,1284,1,0,0,0,1280,1282,3,226,113,0,1281,1283,5,
        135,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,1285,1,0,0,0,1284,
        1280,1,0,0,0,1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,1276,1,0,0,
        0,1286,1287,1,0,0,0,1287,143,1,0,0,0,1288,1289,3,238,119,0,1289,
        145,1,0,0,0,1290,1291,3,238,119,0,1291,147,1,0,0,0,1292,1297,3,182,
        91,0,1293,1295,5,135,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,
        1296,1,0,0,0,1296,1298,3,180,90,0,1297,1294,1,0,0,0,1298,1299,1,
        0,0,0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,149,1,0,0,0,1301,
        1302,3,152,76,0,1302,151,1,0,0,0,1303,1310,3,154,77,0,1304,1305,
        5,135,0,0,1305,1306,5,83,0,0,1306,1307,5,135,0,0,1307,1309,3,154,
        77,0,1308,1304,1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1310,
        1311,1,0,0,0,1311,153,1,0,0,0,1312,1310,1,0,0,0,1313,1320,3,156,
        78,0,1314,1315,5,135,0,0,1315,1316,5,84,0,0,1316,1317,5,135,0,0,
        1317,1319,3,156,78,0,1318,1314,1,0,0,0,1319,1322,1,0,0,0,1320,1318,
        1,0,0,0,1320,1321,1,0,0,0,1321,155,1,0,0,0,1322,1320,1,0,0,0,1323,
        1330,3,158,79,0,1324,1325,5,135,0,0,1325,1326,5,85,0,0,1326,1327,
        5,135,0,0,1327,1329,3,158,79,0,1328,1324,1,0,0,0,1329,1332,1,0,0,
        0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,157,1,0,0,0,1332,1330,
        1,0,0,0,1333,1335,5,86,0,0,1334,1336,5,135,0,0,1335,1334,1,0,0,0,
        1335,1336,1,0,0,0,1336,1338,1,0,0,0,1337,1333,1,0,0,0,1338,1341,
        1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,
        1339,1,0,0,0,1342,1343,3,160,80,0,1343,159,1,0,0,0,1344,1351,3,40,
        20,0,1345,1347,5,135,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,
        1348,1,0,0,0,1348,1350,3,162,81,0,1349,1346,1,0,0,0,1350,1353,1,
        0,0,0,1351,1349,1,0,0,0,1351,1352,1,0,0,0,1352,161,1,0,0,0,1353,
        1351,1,0,0,0,1354,1356,5,2,0,0,1355,1357,5,135,0,0,1356,1355,1,0,
        0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,1385,3,40,20,0,1359,
        1361,5,16,0,0,1360,1362,5,135,0,0,1361,1360,1,0,0,0,1361,1362,1,
        0,0,0,1362,1363,1,0,0,0,1363,1385,3,40,20,0,1364,1366,5,17,0,0,1365,
        1367,5,135,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,
        0,0,1368,1385,3,40,20,0,1369,1371,5,18,0,0,1370,1372,5,135,0,0,1371,
        1370,1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,0,0,0,1373,1385,3,40,
        20,0,1374,1376,5,19,0,0,1375,1377,5,135,0,0,1376,1375,1,0,0,0,1376,
        1377,1,0,0,0,1377,1378,1,0,0,0,1378,1385,3,40,20,0,1379,1381,5,20,
        0,0,1380,1382,5,135,0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,
        1383,1,0,0,0,1383,1385,3,40,20,0,1384,1354,1,0,0,0,1384,1359,1,0,
        0,0,1384,1364,1,0,0,0,1384,1369,1,0,0,0,1384,1374,1,0,0,0,1384,1379,
        1,0,0,0,1385,163,1,0,0,0,1386,1387,5,135,0,0,1387,1388,5,87,0,0,
        1388,1389,5,135,0,0,1389,1397,5,71,0,0,1390,1391,5,135,0,0,1391,
        1392,5,88,0,0,1392,1393,5,135,0,0,1393,1397,5,71,0,0,1394,1395,5,
        135,0,0,1395,1397,5,89,0,0,1396,1386,1,0,0,0,1396,1390,1,0,0,0,1396,
        1394,1,0,0,0,1397,1399,1,0,0,0,1398,1400,5,135,0,0,1399,1398,1,0,
        0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,3,170,85,0,1402,
        165,1,0,0,0,1403,1404,5,135,0,0,1404,1406,5,90,0,0,1405,1407,5,135,
        0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1409,
        3,170,85,0,1409,167,1,0,0,0,1410,1411,5,135,0,0,1411,1412,5,91,0,
        0,1412,1413,5,135,0,0,1413,1421,5,92,0,0,1414,1415,5,135,0,0,1415,
        1416,5,91,0,0,1416,1417,5,135,0,0,1417,1418,5,86,0,0,1418,1419,5,
        135,0,0,1419,1421,5,92,0,0,1420,1410,1,0,0,0,1420,1414,1,0,0,0,1421,
        169,1,0,0,0,1422,1441,3,172,86,0,1423,1425,5,135,0,0,1424,1423,1,
        0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1428,5,21,0,0,1427,
        1429,5,135,0,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1430,1,0,
        0,0,1430,1440,3,172,86,0,1431,1433,5,135,0,0,1432,1431,1,0,0,0,1432,
        1433,1,0,0,0,1433,1434,1,0,0,0,1434,1436,5,22,0,0,1435,1437,5,135,
        0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,1438,1440,
        3,172,86,0,1439,1424,1,0,0,0,1439,1432,1,0,0,0,1440,1443,1,0,0,0,
        1441,1439,1,0,0,0,1441,1442,1,0,0,0,1442,171,1,0,0,0,1443,1441,1,
        0,0,0,1444,1471,3,174,87,0,1445,1447,5,135,0,0,1446,1445,1,0,0,0,
        1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1450,5,14,0,0,1449,1451,
        5,135,0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,
        1452,1470,3,174,87,0,1453,1455,5,135,0,0,1454,1453,1,0,0,0,1454,
        1455,1,0,0,0,1455,1456,1,0,0,0,1456,1458,5,23,0,0,1457,1459,5,135,
        0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,1460,1470,
        3,174,87,0,1461,1463,5,135,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,
        0,1463,1464,1,0,0,0,1464,1466,5,24,0,0,1465,1467,5,135,0,0,1466,
        1465,1,0,0,0,1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1470,3,174,
        87,0,1469,1446,1,0,0,0,1469,1454,1,0,0,0,1469,1462,1,0,0,0,1470,
        1473,1,0,0,0,1471,1469,1,0,0,0,1471,1472,1,0,0,0,1472,173,1,0,0,
        0,1473,1471,1,0,0,0,1474,1485,3,176,88,0,1475,1477,5,135,0,0,1476,
        1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1480,5,25,
        0,0,1479,1481,5,135,0,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,
        1482,1,0,0,0,1482,1484,3,176,88,0,1483,1476,1,0,0,0,1484,1487,1,
        0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,175,1,0,0,0,1487,
        1485,1,0,0,0,1488,1495,3,42,21,0,1489,1491,7,4,0,0,1490,1492,5,135,
        0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1495,
        3,42,21,0,1494,1488,1,0,0,0,1494,1489,1,0,0,0,1495,177,1,0,0,0,1496,
        1503,3,182,91,0,1497,1499,5,135,0,0,1498,1497,1,0,0,0,1498,1499,
        1,0,0,0,1499,1500,1,0,0,0,1500,1502,3,180,90,0,1501,1498,1,0,0,0,
        1502,1505,1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1510,
        1,0,0,0,1505,1503,1,0,0,0,1506,1508,5,135,0,0,1507,1506,1,0,0,0,
        1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1511,3,138,69,0,1510,1507,
        1,0,0,0,1510,1511,1,0,0,0,1511,179,1,0,0,0,1512,1514,5,1,0,0,1513,
        1515,5,135,0,0,1514,1513,1,0,0,0,1514,1515,1,0,0,0,1515,1516,1,0,
        0,0,1516,1517,3,234,117,0,1517,181,1,0,0,0,1518,1543,3,220,110,0,
        1519,1543,3,236,118,0,1520,1543,3,184,92,0,1521,1523,5,93,0,0,1522,
        1524,5,135,0,0,1523,1522,1,0,0,0,1523,1524,1,0,0,0,1524,1525,1,0,
        0,0,1525,1527,5,5,0,0,1526,1528,5,135,0,0,1527,1526,1,0,0,0,1527,
        1528,1,0,0,0,1528,1529,1,0,0,0,1529,1531,5,14,0,0,1530,1532,5,135,
        0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1543,
        5,6,0,0,1534,1543,3,188,94,0,1535,1543,3,190,95,0,1536,1543,3,192,
        96,0,1537,1543,3,196,98,0,1538,1543,3,198,99,0,1539,1543,3,202,101,
        0,1540,1543,3,206,103,0,1541,1543,3,218,109,0,1542,1518,1,0,0,0,
        1542,1519,1,0,0,0,1542,1520,1,0,0,0,1542,1521,1,0,0,0,1542,1534,
        1,0,0,0,1542,1535,1,0,0,0,1542,1536,1,0,0,0,1542,1537,1,0,0,0,1542,
        1538,1,0,0,0,1542,1539,1,0,0,0,1542,1540,1,0,0,0,1542,1541,1,0,0,
        0,1543,183,1,0,0,0,1544,1549,5,94,0,0,1545,1547,5,135,0,0,1546,1545,
        1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1550,3,186,93,0,
        1549,1546,1,0,0,0,1550,1551,1,0,0,0,1551,1549,1,0,0,0,1551,1552,
        1,0,0,0,1552,1567,1,0,0,0,1553,1555,5,94,0,0,1554,1556,5,135,0,0,
        1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1562,
        3,150,75,0,1558,1560,5,135,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,
        0,1560,1561,1,0,0,0,1561,1563,3,186,93,0,1562,1559,1,0,0,0,1563,
        1564,1,0,0,0,1564,1562,1,0,0,0,1564,1565,1,0,0,0,1565,1567,1,0,0,
        0,1566,1544,1,0,0,0,1566,1553,1,0,0,0,1567,1576,1,0,0,0,1568,1570,
        5,135,0,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,1570,1571,1,0,0,0,
        1571,1573,5,95,0,0,1572,1574,5,135,0,0,1573,1572,1,0,0,0,1573,1574,
        1,0,0,0,1574,1575,1,0,0,0,1575,1577,3,150,75,0,1576,1569,1,0,0,0,
        1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1580,5,135,0,0,1579,1578,
        1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,1581,1582,5,96,0,0,1582,
        185,1,0,0,0,1583,1585,5,97,0,0,1584,1586,5,135,0,0,1585,1584,1,0,
        0,0,1585,1586,1,0,0,0,1586,1587,1,0,0,0,1587,1589,3,150,75,0,1588,
        1590,5,135,0,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,
        0,0,1591,1593,5,98,0,0,1592,1594,5,135,0,0,1593,1592,1,0,0,0,1593,
        1594,1,0,0,0,1594,1595,1,0,0,0,1595,1596,3,150,75,0,1596,187,1,0,
        0,0,1597,1599,5,10,0,0,1598,1600,5,135,0,0,1599,1598,1,0,0,0,1599,
        1600,1,0,0,0,1600,1601,1,0,0,0,1601,1610,3,194,97,0,1602,1604,5,
        135,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1605,1,0,0,0,1605,
        1607,5,15,0,0,1606,1608,5,135,0,0,1607,1606,1,0,0,0,1607,1608,1,
        0,0,0,1608,1609,1,0,0,0,1609,1611,3,150,75,0,1610,1603,1,0,0,0,1610,
        1611,1,0,0,0,1611,1613,1,0,0,0,1612,1614,5,135,0,0,1613,1612,1,0,
        0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,11,0,0,1616,
        189,1,0,0,0,1617,1619,5,10,0,0,1618,1620,5,135,0,0,1619,1618,1,0,
        0,0,1619,1620,1,0,0,0,1620,1629,1,0,0,0,1621,1623,3,218,109,0,1622,
        1624,5,135,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,
        0,0,1625,1627,5,2,0,0,1626,1628,5,135,0,0,1627,1626,1,0,0,0,1627,
        1628,1,0,0,0,1628,1630,1,0,0,0,1629,1621,1,0,0,0,1629,1630,1,0,0,
        0,1630,1631,1,0,0,0,1631,1633,3,128,64,0,1632,1634,5,135,0,0,1633,
        1632,1,0,0,0,1633,1634,1,0,0,0,1634,1639,1,0,0,0,1635,1637,3,120,
        60,0,1636,1638,5,135,0,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,
        1640,1,0,0,0,1639,1635,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,
        0,1641,1643,5,15,0,0,1642,1644,5,135,0,0,1643,1642,1,0,0,0,1643,
        1644,1,0,0,0,1644,1645,1,0,0,0,1645,1647,3,150,75,0,1646,1648,5,
        135,0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,
        1650,5,11,0,0,1650,191,1,0,0,0,1651,1653,5,57,0,0,1652,1654,5,135,
        0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1657,
        5,5,0,0,1656,1658,5,135,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,
        1658,1659,1,0,0,0,1659,1661,3,194,97,0,1660,1662,5,135,0,0,1661,
        1660,1,0,0,0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,1664,5,6,0,
        0,1664,1708,1,0,0,0,1665,1667,5,99,0,0,1666,1668,5,135,0,0,1667,
        1666,1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,1671,5,5,0,
        0,1670,1672,5,135,0,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,1673,
        1,0,0,0,1673,1675,3,194,97,0,1674,1676,5,135,0,0,1675,1674,1,0,0,
        0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,1678,5,6,0,0,1678,1708,
        1,0,0,0,1679,1681,5,100,0,0,1680,1682,5,135,0,0,1681,1680,1,0,0,
        0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,5,5,0,0,1684,1686,
        5,135,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1687,1,0,0,0,
        1687,1689,3,194,97,0,1688,1690,5,135,0,0,1689,1688,1,0,0,0,1689,
        1690,1,0,0,0,1690,1691,1,0,0,0,1691,1692,5,6,0,0,1692,1708,1,0,0,
        0,1693,1695,5,101,0,0,1694,1696,5,135,0,0,1695,1694,1,0,0,0,1695,
        1696,1,0,0,0,1696,1697,1,0,0,0,1697,1699,5,5,0,0,1698,1700,5,135,
        0,0,1699,1698,1,0,0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1703,
        3,194,97,0,1702,1704,5,135,0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,
        0,1704,1705,1,0,0,0,1705,1706,5,6,0,0,1706,1708,1,0,0,0,1707,1651,
        1,0,0,0,1707,1665,1,0,0,0,1707,1679,1,0,0,0,1707,1693,1,0,0,0,1708,
        193,1,0,0,0,1709,1714,3,200,100,0,1710,1712,5,135,0,0,1711,1710,
        1,0,0,0,1711,1712,1,0,0,0,1712,1713,1,0,0,0,1713,1715,3,120,60,0,
        1714,1711,1,0,0,0,1714,1715,1,0,0,0,1715,195,1,0,0,0,1716,1717,3,
        128,64,0,1717,197,1,0,0,0,1718,1720,5,5,0,0,1719,1721,5,135,0,0,
        1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,1722,1724,
        3,150,75,0,1723,1725,5,135,0,0,1724,1723,1,0,0,0,1724,1725,1,0,0,
        0,1725,1726,1,0,0,0,1726,1727,5,6,0,0,1727,199,1,0,0,0,1728,1729,
        3,218,109,0,1729,1730,5,135,0,0,1730,1731,5,90,0,0,1731,1732,5,135,
        0,0,1732,1733,3,150,75,0,1733,201,1,0,0,0,1734,1736,3,204,102,0,
        1735,1737,5,135,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1738,
        1,0,0,0,1738,1740,5,5,0,0,1739,1741,5,135,0,0,1740,1739,1,0,0,0,
        1740,1741,1,0,0,0,1741,1746,1,0,0,0,1742,1744,5,73,0,0,1743,1745,
        5,135,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1747,1,0,0,0,
        1746,1742,1,0,0,0,1746,1747,1,0,0,0,1747,1765,1,0,0,0,1748,1750,
        3,150,75,0,1749,1751,5,135,0,0,1750,1749,1,0,0,0,1750,1751,1,0,0,
        0,1751,1762,1,0,0,0,1752,1754,5,4,0,0,1753,1755,5,135,0,0,1754,1753,
        1,0,0,0,1754,1755,1,0,0,0,1755,1756,1,0,0,0,1756,1758,3,150,75,0,
        1757,1759,5,135,0,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,1761,
        1,0,0,0,1760,1752,1,0,0,0,1761,1764,1,0,0,0,1762,1760,1,0,0,0,1762,
        1763,1,0,0,0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1765,1748,1,0,0,
        0,1765,1766,1,0,0,0,1766,1767,1,0,0,0,1767,1768,5,6,0,0,1768,203,
        1,0,0,0,1769,1770,3,216,108,0,1770,1771,3,58,29,0,1771,205,1,0,0,
        0,1772,1774,5,102,0,0,1773,1775,5,135,0,0,1774,1773,1,0,0,0,1774,
        1775,1,0,0,0,1775,1776,1,0,0,0,1776,1778,5,7,0,0,1777,1779,5,135,
        0,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1788,1,0,0,0,1780,1789,
        3,66,33,0,1781,1786,3,122,61,0,1782,1784,5,135,0,0,1783,1782,1,0,
        0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,3,120,60,0,1786,
        1783,1,0,0,0,1786,1787,1,0,0,0,1787,1789,1,0,0,0,1788,1780,1,0,0,
        0,1788,1781,1,0,0,0,1789,1791,1,0,0,0,1790,1792,5,135,0,0,1791,1790,
        1,0,0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,1793,1794,5,9,0,0,1794,
        207,1,0,0,0,1795,1797,3,214,107,0,1796,1798,5,135,0,0,1797,1796,
        1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1801,5,5,0,0,1800,
        1802,5,135,0,0,1801,1800,1,0,0,0,1801,1802,1,0,0,0,1802,1820,1,0,
        0,0,1803,1805,3,150,75,0,1804,1806,5,135,0,0,1805,1804,1,0,0,0,1805,
        1806,1,0,0,0,1806,1817,1,0,0,0,1807,1809,5,4,0,0,1808,1810,5,135,
        0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1813,
        3,150,75,0,1812,1814,5,135,0,0,1813,1812,1,0,0,0,1813,1814,1,0,0,
        0,1814,1816,1,0,0,0,1815,1807,1,0,0,0,1816,1819,1,0,0,0,1817,1815,
        1,0,0,0,1817,1818,1,0,0,0,1818,1821,1,0,0,0,1819,1817,1,0,0,0,1820,
        1803,1,0,0,0,1820,1821,1,0,0,0,1821,1822,1,0,0,0,1822,1823,5,6,0,
        0,1823,209,1,0,0,0,1824,1825,3,214,107,0,1825,211,1,0,0,0,1826,1827,
        3,58,29,0,1827,213,1,0,0,0,1828,1829,3,216,108,0,1829,1830,3,58,
        29,0,1830,215,1,0,0,0,1831,1832,3,58,29,0,1832,1833,5,1,0,0,1833,
        1835,1,0,0,0,1834,1831,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,
        0,1836,1837,1,0,0,0,1837,217,1,0,0,0,1838,1836,1,0,0,0,1839,1840,
        3,58,29,0,1840,219,1,0,0,0,1841,1848,3,222,111,0,1842,1848,5,92,
        0,0,1843,1848,3,224,112,0,1844,1848,5,117,0,0,1845,1848,3,230,115,
        0,1846,1848,3,232,116,0,1847,1841,1,0,0,0,1847,1842,1,0,0,0,1847,
        1843,1,0,0,0,1847,1844,1,0,0,0,1847,1845,1,0,0,0,1847,1846,1,0,0,
        0,1848,221,1,0,0,0,1849,1850,7,5,0,0,1850,223,1,0,0,0,1851,1854,
        3,228,114,0,1852,1854,3,226,113,0,1853,1851,1,0,0,0,1853,1852,1,
        0,0,0,1854,225,1,0,0,0,1855,1856,7,6,0,0,1856,227,1,0,0,0,1857,1858,
        7,7,0,0,1858,229,1,0,0,0,1859,1861,5,10,0,0,1860,1862,5,135,0,0,
        1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1880,1,0,0,0,1863,1865,
        3,150,75,0,1864,1866,5,135,0,0,1865,1864,1,0,0,0,1865,1866,1,0,0,
        0,1866,1877,1,0,0,0,1867,1869,5,4,0,0,1868,1870,5,135,0,0,1869,1868,
        1,0,0,0,1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,1873,3,150,75,0,
        1872,1874,5,135,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,1876,
        1,0,0,0,1875,1867,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,0,1877,
        1878,1,0,0,0,1878,1881,1,0,0,0,1879,1877,1,0,0,0,1880,1863,1,0,0,
        0,1880,1881,1,0,0,0,1881,1882,1,0,0,0,1882,1883,5,11,0,0,1883,231,
        1,0,0,0,1884,1886,5,7,0,0,1885,1887,5,135,0,0,1886,1885,1,0,0,0,
        1886,1887,1,0,0,0,1887,1921,1,0,0,0,1888,1890,3,234,117,0,1889,1891,
        5,135,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,
        1892,1894,5,8,0,0,1893,1895,5,135,0,0,1894,1893,1,0,0,0,1894,1895,
        1,0,0,0,1895,1896,1,0,0,0,1896,1898,3,150,75,0,1897,1899,5,135,0,
        0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1918,1,0,0,0,1900,1902,
        5,4,0,0,1901,1903,5,135,0,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,
        1903,1904,1,0,0,0,1904,1906,3,234,117,0,1905,1907,5,135,0,0,1906,
        1905,1,0,0,0,1906,1907,1,0,0,0,1907,1908,1,0,0,0,1908,1910,5,8,0,
        0,1909,1911,5,135,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,
        1,0,0,0,1912,1914,3,150,75,0,1913,1915,5,135,0,0,1914,1913,1,0,0,
        0,1914,1915,1,0,0,0,1915,1917,1,0,0,0,1916,1900,1,0,0,0,1917,1920,
        1,0,0,0,1918,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1922,1,0,0,0,1920,
        1918,1,0,0,0,1921,1888,1,0,0,0,1921,1922,1,0,0,0,1922,1923,1,0,0,
        0,1923,1924,5,9,0,0,1924,233,1,0,0,0,1925,1926,3,238,119,0,1926,
        235,1,0,0,0,1927,1930,5,26,0,0,1928,1931,3,58,29,0,1929,1931,5,106,
        0,0,1930,1928,1,0,0,0,1930,1929,1,0,0,0,1931,237,1,0,0,0,1932,1935,
        3,58,29,0,1933,1935,3,60,30,0,1934,1932,1,0,0,0,1934,1933,1,0,0,
        0,1935,239,1,0,0,0,1936,1937,7,8,0,0,1937,241,1,0,0,0,1938,1939,
        7,9,0,0,1939,243,1,0,0,0,1940,1941,7,10,0,0,1941,245,1,0,0,0,366,
        249,253,257,261,265,267,270,273,281,284,287,291,297,300,305,311,
        314,319,322,325,329,335,338,343,346,349,353,357,360,364,368,374,
        378,384,388,394,398,402,406,410,415,422,427,431,435,439,443,448,
        455,460,464,470,476,481,484,488,492,498,502,507,511,515,519,525,
        529,535,539,541,545,547,551,553,557,559,565,569,576,584,587,593,
        597,599,602,606,610,612,616,620,622,626,628,631,635,637,641,643,
        652,656,660,662,666,673,677,681,687,692,695,698,700,703,709,714,
        724,728,732,736,740,743,749,756,760,763,766,774,779,786,791,794,
        798,802,806,812,816,821,826,830,833,835,840,846,850,855,859,864,
        869,873,883,890,903,907,913,917,921,926,933,937,942,949,955,960,
        966,969,975,977,981,985,990,994,997,1004,1011,1014,1020,1023,1029,
        1033,1037,1041,1045,1050,1055,1059,1064,1067,1076,1085,1090,1103,
        1106,1114,1118,1123,1130,1135,1142,1146,1151,1155,1161,1165,1168,
        1171,1175,1181,1185,1188,1191,1197,1200,1203,1207,1213,1216,1219,
        1223,1227,1231,1235,1239,1242,1247,1252,1257,1262,1268,1272,1274,
        1278,1282,1284,1286,1294,1299,1310,1320,1330,1335,1339,1346,1351,
        1356,1361,1366,1371,1376,1381,1384,1396,1399,1406,1420,1424,1428,
        1432,1436,1439,1441,1446,1450,1454,1458,1462,1466,1469,1471,1476,
        1480,1485,1491,1494,1498,1503,1507,1510,1514,1523,1527,1531,1542,
        1546,1551,1555,1559,1564,1566,1569,1573,1576,1579,1585,1589,1593,
        1599,1603,1607,1610,1613,1619,1623,1627,1629,1633,1637,1639,1643,
        1647,1653,1657,1661,1667,1671,1675,1681,1685,1689,1695,1699,1703,
        1707,1711,1714,1720,1724,1736,1740,1744,1746,1750,1754,1758,1762,
        1765,1774,1778,1783,1786,1788,1791,1797,1801,1805,1809,1813,1817,
        1820,1836,1847,1853,1861,1865,1869,1873,1877,1880,1886,1890,1894,
        1898,1902,1906,1910,1914,1918,1921,1930,1934
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_oC_PatternPart = 11
    RULE_s_PathFunctionPattern = 12
    RULE_s_SinglePathPattern = 13
    RULE_oC_NodePattern = 14
    RULE_s_Properties = 15
    RULE_s_PropertiesPattern = 16
    RULE_s_PropertyNode = 17
    RULE_s_ValueNode = 18
    RULE_oC_RelationshipDetail = 19
    RULE_oC_StringListNullPredicateExpression = 20
    RULE_oC_ListOperatorExpression = 21
    RULE_oC_SingleIndexExpression = 22
    RULE_oC_DoubleIndexExpression = 23
    RULE_s_AtTExpression = 24
    RULE_oC_PropertyLookupTime = 25
    RULE_s_TimePredicateExpression = 26
    RULE_s_AtTElement = 27
    RULE_s_TimePointLiteral = 28
    RULE_oC_SymbolicName = 29
    RULE_oC_ReservedWord = 30
    RULE_oC_Cypher = 31
    RULE_oC_Statement = 32
    RULE_oC_RegularQuery = 33
    RULE_oC_Union = 34
    RULE_oC_SingleQuery = 35
    RULE_oC_SinglePartQuery = 36
    RULE_oC_MultiPartQuery = 37
    RULE_s_WithPartQuery = 38
    RULE_oC_ReadingClause = 39
    RULE_oC_Unwind = 40
    RULE_oC_Merge = 41
    RULE_oC_MergeAction = 42
    RULE_oC_Create = 43
    RULE_oC_Set = 44
    RULE_oC_Remove = 45
    RULE_oC_RemoveItem = 46
    RULE_oC_InQueryCall = 47
    RULE_oC_StandaloneCall = 48
    RULE_oC_YieldItems = 49
    RULE_oC_YieldItem = 50
    RULE_oC_With = 51
    RULE_oC_Return = 52
    RULE_oC_ProjectionBody = 53
    RULE_oC_ProjectionItems = 54
    RULE_oC_ProjectionItem = 55
    RULE_oC_Order = 56
    RULE_oC_Skip = 57
    RULE_oC_Limit = 58
    RULE_oC_SortItem = 59
    RULE_oC_Where = 60
    RULE_oC_Pattern = 61
    RULE_oC_AnonymousPatternPart = 62
    RULE_oC_PatternElement = 63
    RULE_oC_RelationshipsPattern = 64
    RULE_oC_PatternElementChain = 65
    RULE_oC_RelationshipPattern = 66
    RULE_oC_Properties = 67
    RULE_oC_RelationshipTypes = 68
    RULE_oC_NodeLabels = 69
    RULE_oC_NodeLabel = 70
    RULE_oC_RangeLiteral = 71
    RULE_oC_LabelName = 72
    RULE_oC_RelTypeName = 73
    RULE_oC_PropertyExpression = 74
    RULE_oC_Expression = 75
    RULE_oC_OrExpression = 76
    RULE_oC_XorExpression = 77
    RULE_oC_AndExpression = 78
    RULE_oC_NotExpression = 79
    RULE_oC_ComparisonExpression = 80
    RULE_oC_PartialComparisonExpression = 81
    RULE_oC_StringPredicateExpression = 82
    RULE_oC_ListPredicateExpression = 83
    RULE_oC_NullPredicateExpression = 84
    RULE_oC_AddOrSubtractExpression = 85
    RULE_oC_MultiplyDivideModuloExpression = 86
    RULE_oC_PowerOfExpression = 87
    RULE_oC_UnaryAddOrSubtractExpression = 88
    RULE_oC_PropertyOrLabelsExpression = 89
    RULE_oC_PropertyLookup = 90
    RULE_oC_Atom = 91
    RULE_oC_CaseExpression = 92
    RULE_oC_CaseAlternative = 93
    RULE_oC_ListComprehension = 94
    RULE_oC_PatternComprehension = 95
    RULE_oC_Quantifier = 96
    RULE_oC_FilterExpression = 97
    RULE_oC_PatternPredicate = 98
    RULE_oC_ParenthesizedExpression = 99
    RULE_oC_IdInColl = 100
    RULE_oC_FunctionInvocation = 101
    RULE_oC_FunctionName = 102
    RULE_oC_ExistentialSubquery = 103
    RULE_oC_ExplicitProcedureInvocation = 104
    RULE_oC_ImplicitProcedureInvocation = 105
    RULE_oC_ProcedureResultField = 106
    RULE_oC_ProcedureName = 107
    RULE_oC_Namespace = 108
    RULE_oC_Variable = 109
    RULE_oC_Literal = 110
    RULE_oC_BooleanLiteral = 111
    RULE_oC_NumberLiteral = 112
    RULE_oC_IntegerLiteral = 113
    RULE_oC_DoubleLiteral = 114
    RULE_oC_ListLiteral = 115
    RULE_oC_MapLiteral = 116
    RULE_oC_PropertyKeyName = 117
    RULE_oC_Parameter = 118
    RULE_oC_SchemaName = 119
    RULE_oC_LeftArrowHead = 120
    RULE_oC_RightArrowHead = 121
    RULE_oC_Dash = 122

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "oC_SingleIndexExpression", 
                   "oC_DoubleIndexExpression", "s_AtTExpression", "oC_PropertyLookupTime", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "s_WithPartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 247
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 251
                self.match(s_cypherParser.OPTIONAL)
                self.state = 252
                self.match(s_cypherParser.SP)


            self.state = 255
            self.match(s_cypherParser.MATCH)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 256
                self.match(s_cypherParser.SP)


            self.state = 259
            self.oC_Pattern()
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 260
                    self.match(s_cypherParser.SP)


                self.state = 265
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 263
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 264
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 269
                    self.match(s_cypherParser.SP)


                self.state = 272
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 275
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 276
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 277
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 278
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 279
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 280
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 283
                    self.match(s_cypherParser.SP)


                self.state = 286
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.oC_Variable()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 290
                    self.match(s_cypherParser.SP)


                self.state = 293
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.oC_Variable()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 296
                        self.match(s_cypherParser.SP)


                    self.state = 299
                    self.s_AtTElement()


                self.state = 302
                self.match(s_cypherParser.T__0)
                self.state = 303
                self.oC_PropertyKeyName()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 304
                    self.match(s_cypherParser.SP)


                self.state = 307
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self.oC_Variable()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 310
                        self.match(s_cypherParser.SP)


                    self.state = 313
                    self.s_AtTElement()


                self.state = 316
                self.match(s_cypherParser.T__0)
                self.state = 317
                self.oC_PropertyKeyName()
                self.state = 322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 318
                        self.match(s_cypherParser.SP)


                    self.state = 321
                    self.s_AtTElement()


                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 324
                    self.match(s_cypherParser.SP)


                self.state = 327
                self.match(s_cypherParser.PoundValue)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 328
                    self.match(s_cypherParser.SP)


                self.state = 331
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.oC_Variable()
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 334
                        self.match(s_cypherParser.SP)


                    self.state = 337
                    self.s_AtTElement()


                self.state = 340
                self.match(s_cypherParser.T__0)
                self.state = 341
                self.oC_PropertyKeyName()
                self.state = 346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 342
                        self.match(s_cypherParser.SP)


                    self.state = 345
                    self.s_AtTElement()


                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 348
                    self.match(s_cypherParser.SP)


                self.state = 351
                self.match(s_cypherParser.T__1)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 352
                    self.match(s_cypherParser.SP)


                self.state = 355
                self.oC_Expression()
                self.state = 360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 356
                        self.match(s_cypherParser.SP)


                    self.state = 359
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 362
                self.oC_PropertyExpression()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 363
                    self.match(s_cypherParser.SP)


                self.state = 366
                self.match(s_cypherParser.T__1)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 367
                    self.match(s_cypherParser.SP)


                self.state = 370
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 372
                self.oC_Variable()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 373
                    self.match(s_cypherParser.SP)


                self.state = 376
                self.match(s_cypherParser.T__1)
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 377
                    self.match(s_cypherParser.SP)


                self.state = 380
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 382
                self.oC_Variable()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 383
                    self.match(s_cypherParser.SP)


                self.state = 386
                self.match(s_cypherParser.T__2)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 387
                    self.match(s_cypherParser.SP)


                self.state = 390
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 392
                self.oC_Variable()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 393
                    self.match(s_cypherParser.SP)


                self.state = 396
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(s_cypherParser.STALE)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 401
                self.match(s_cypherParser.SP)


            self.state = 404
            self.s_StaleItem()
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 405
                        self.match(s_cypherParser.SP)


                    self.state = 408
                    self.match(s_cypherParser.T__3)
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 409
                        self.match(s_cypherParser.SP)


                    self.state = 412
                    self.s_StaleItem() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.oC_Expression()
                self.state = 419
                self.match(s_cypherParser.T__0)
                self.state = 420
                self.oC_PropertyKeyName()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 421
                    self.match(s_cypherParser.SP)


                self.state = 424
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 429
                self.match(s_cypherParser.DETACH)
                self.state = 430
                self.match(s_cypherParser.SP)


            self.state = 433
            self.match(s_cypherParser.DELETE)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 434
                self.match(s_cypherParser.SP)


            self.state = 437
            self.s_DeleteItem()
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 438
                        self.match(s_cypherParser.SP)


                    self.state = 441
                    self.match(s_cypherParser.T__3)
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 442
                        self.match(s_cypherParser.SP)


                    self.state = 445
                    self.s_DeleteItem() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.oC_Expression()
                self.state = 452
                self.match(s_cypherParser.T__0)
                self.state = 453
                self.oC_PropertyKeyName()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 454
                    self.match(s_cypherParser.SP)


                self.state = 457
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(s_cypherParser.AT_TIME)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 463
                self.match(s_cypherParser.SP)


            self.state = 466
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(s_cypherParser.BETWEEN)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 469
                self.match(s_cypherParser.SP)


            self.state = 472
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.match(s_cypherParser.SNAPSHOT)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 475
                    self.match(s_cypherParser.SP)


                self.state = 478
                self.oC_Expression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.match(s_cypherParser.SCOPE)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 480
                    self.match(s_cypherParser.SP)


                self.state = 483
                self.oC_Expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.oC_Variable()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 487
                    self.match(s_cypherParser.SP)


                self.state = 490
                self.match(s_cypherParser.T__1)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 491
                    self.match(s_cypherParser.SP)


                self.state = 494
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.oC_Variable()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 497
                    self.match(s_cypherParser.SP)


                self.state = 500
                self.match(s_cypherParser.T__1)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 501
                    self.match(s_cypherParser.SP)


                self.state = 504
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 506
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.oC_FunctionName()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 510
                self.match(s_cypherParser.SP)


            self.state = 513
            self.match(s_cypherParser.T__4)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 514
                self.match(s_cypherParser.SP)


            self.state = 517
            self.s_SinglePathPattern()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 518
                self.match(s_cypherParser.SP)


            self.state = 521
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.oC_NodePattern()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 524
                self.match(s_cypherParser.SP)


            self.state = 527
            self.oC_RelationshipPattern()
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 528
                self.match(s_cypherParser.SP)


            self.state = 531
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(s_cypherParser.T__4)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 534
                self.match(s_cypherParser.SP)


            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 537
                self.oC_Variable()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 538
                    self.match(s_cypherParser.SP)




            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 543
                self.oC_NodeLabels()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 544
                    self.match(s_cypherParser.SP)




            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 549
                self.s_AtTElement()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 550
                    self.match(s_cypherParser.SP)




            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 555
                self.s_Properties()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 556
                    self.match(s_cypherParser.SP)




            self.state = 561
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Properties)
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(s_cypherParser.T__6)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 568
                self.match(s_cypherParser.SP)


            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 571
                self.s_PropertyNode()
                self.state = 572
                self.match(s_cypherParser.T__7)
                self.state = 573
                self.s_ValueNode()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 574
                    self.match(s_cypherParser.T__3)
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 575
                        self.match(s_cypherParser.SP)


                    self.state = 578
                    self.s_PropertyNode()
                    self.state = 579
                    self.match(s_cypherParser.T__7)
                    self.state = 580
                    self.s_ValueNode()
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 589
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.oC_PropertyKeyName()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 592
                self.match(s_cypherParser.SP)


            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 595
                self.s_AtTElement()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 596
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 601
                self.match(s_cypherParser.SP)


            self.state = 604
            self.oC_Expression()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 605
                self.match(s_cypherParser.SP)


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 608
                self.s_AtTElement()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 609
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(s_cypherParser.T__9)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 615
                self.match(s_cypherParser.SP)


            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 618
                self.oC_Variable()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 619
                    self.match(s_cypherParser.SP)




            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 624
                self.oC_RelationshipTypes()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 625
                    self.match(s_cypherParser.SP)




            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 630
                self.oC_RangeLiteral()


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 633
                self.s_AtTElement()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 634
                    self.match(s_cypherParser.SP)




            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 639
                self.oC_Properties()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 640
                    self.match(s_cypherParser.SP)




            self.state = 645
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.oC_AddOrSubtractExpression()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 648
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 649
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 650
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 651
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SingleIndexExpressionContext,i)


        def oC_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 654
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 655
                self.s_AtTExpression()
                pass


            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        self.state = 658
                        self.oC_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 659
                        self.oC_DoubleIndexExpression()
                        pass

             
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleIndexExpression" ):
                listener.enterOC_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleIndexExpression" ):
                listener.exitOC_SingleIndexExpression(self)




    def oC_SingleIndexExpression(self):

        localctx = s_cypherParser.OC_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 665
                self.match(s_cypherParser.SP)


            self.state = 668
            self.match(s_cypherParser.T__9)
            self.state = 669
            self.oC_Expression()
            self.state = 670
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleIndexExpression" ):
                listener.enterOC_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleIndexExpression" ):
                listener.exitOC_DoubleIndexExpression(self)




    def oC_DoubleIndexExpression(self):

        localctx = s_cypherParser.OC_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 672
                self.match(s_cypherParser.SP)


            self.state = 675
            self.match(s_cypherParser.T__9)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 676
                self.oC_Expression()


            self.state = 679
            self.match(s_cypherParser.T__11)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 680
                self.oC_Expression()


            self.state = 683
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.oC_Atom()
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 690 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 686
                            self.match(s_cypherParser.SP)


                        self.state = 689
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 692 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 694
                        self.match(s_cypherParser.SP)


                    self.state = 697
                    self.match(s_cypherParser.PoundValue)




            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 702
                self.match(s_cypherParser.SP)


            self.state = 705
            self.oC_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookupTime" ):
                listener.enterOC_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookupTime" ):
                listener.exitOC_PropertyLookupTime(self)




    def oC_PropertyLookupTime(self):

        localctx = s_cypherParser.OC_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(s_cypherParser.AtT)
            self.state = 714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 708
                        self.match(s_cypherParser.SP)


                    self.state = 711
                    self.oC_PropertyLookup() 
                self.state = 716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(s_cypherParser.SP)
            self.state = 718
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 719
            self.match(s_cypherParser.SP)
            self.state = 720
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(s_cypherParser.AtT)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 723
                self.match(s_cypherParser.SP)


            self.state = 726
            self.match(s_cypherParser.T__4)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 727
                self.match(s_cypherParser.SP)


            self.state = 730
            self.s_TimePointLiteral()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 734
            self.match(s_cypherParser.T__3)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 735
                self.match(s_cypherParser.SP)


            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 738
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 739
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 742
                self.match(s_cypherParser.SP)


            self.state = 745
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_TimePointLiteral)
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 755
                self.match(s_cypherParser.SP)


            self.state = 758
            self.oC_Statement()
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 759
                    self.match(s_cypherParser.SP)


                self.state = 762
                self.match(s_cypherParser.T__12)


            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 765
                self.match(s_cypherParser.SP)


            self.state = 768
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.oC_SingleQuery()
            self.state = 779
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 773
                        self.match(s_cypherParser.SP)


                    self.state = 776
                    self.oC_Union() 
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.match(s_cypherParser.UNION)
                self.state = 783
                self.match(s_cypherParser.SP)
                self.state = 784
                self.match(s_cypherParser.ALL)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 785
                    self.match(s_cypherParser.SP)


                self.state = 788
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(s_cypherParser.UNION)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 790
                    self.match(s_cypherParser.SP)


                self.state = 793
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_SingleQuery)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 800
                    self.oC_ReadingClause()
                    self.state = 802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 801
                        self.match(s_cypherParser.SP)


                    self.state = 808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 809
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 810
                    self.oC_ReadingClause()
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 811
                        self.match(s_cypherParser.SP)


                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 819
                self.oC_UpdatingClause()
                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 820
                            self.match(s_cypherParser.SP)


                        self.state = 823
                        self.oC_UpdatingClause() 
                    self.state = 828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 829
                        self.match(s_cypherParser.SP)


                    self.state = 832
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 837
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 840 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 842
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 844
                self.oC_ReadingClause()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 845
                    self.match(s_cypherParser.SP)


                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 853
                self.oC_UpdatingClause()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 854
                    self.match(s_cypherParser.SP)


                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.oC_With()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 863
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_ReadingClause)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(s_cypherParser.UNWIND)
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 872
                self.match(s_cypherParser.SP)


            self.state = 875
            self.oC_Expression()
            self.state = 876
            self.match(s_cypherParser.SP)
            self.state = 877
            self.match(s_cypherParser.AS)
            self.state = 878
            self.match(s_cypherParser.SP)
            self.state = 879
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(s_cypherParser.MERGE)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 882
                self.match(s_cypherParser.SP)


            self.state = 885
            self.oC_PatternPart()
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 886
                    self.match(s_cypherParser.SP)
                    self.state = 887
                    self.oC_MergeAction() 
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_MergeAction)
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.match(s_cypherParser.ON)
                self.state = 894
                self.match(s_cypherParser.SP)
                self.state = 895
                self.match(s_cypherParser.MATCH)
                self.state = 896
                self.match(s_cypherParser.SP)
                self.state = 897
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(s_cypherParser.ON)
                self.state = 899
                self.match(s_cypherParser.SP)
                self.state = 900
                self.match(s_cypherParser.CREATE)
                self.state = 901
                self.match(s_cypherParser.SP)
                self.state = 902
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(s_cypherParser.CREATE)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 906
                self.match(s_cypherParser.SP)


            self.state = 909
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(s_cypherParser.SET)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 912
                self.match(s_cypherParser.SP)


            self.state = 915
            self.oC_SetItem()
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 917
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 916
                        self.match(s_cypherParser.SP)


                    self.state = 919
                    self.match(s_cypherParser.T__3)
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 920
                        self.match(s_cypherParser.SP)


                    self.state = 923
                    self.oC_SetItem() 
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(s_cypherParser.REMOVE)
            self.state = 930
            self.match(s_cypherParser.SP)
            self.state = 931
            self.oC_RemoveItem()
            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 932
                        self.match(s_cypherParser.SP)


                    self.state = 935
                    self.match(s_cypherParser.T__3)
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 936
                        self.match(s_cypherParser.SP)


                    self.state = 939
                    self.oC_RemoveItem() 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_RemoveItem)
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.oC_Variable()
                self.state = 946
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(s_cypherParser.CALL)
            self.state = 952
            self.match(s_cypherParser.SP)
            self.state = 953
            self.oC_ExplicitProcedureInvocation()
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 954
                    self.match(s_cypherParser.SP)


                self.state = 957
                self.match(s_cypherParser.YIELD)
                self.state = 958
                self.match(s_cypherParser.SP)
                self.state = 959
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(s_cypherParser.CALL)
            self.state = 963
            self.match(s_cypherParser.SP)
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 964
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 965
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 968
                    self.match(s_cypherParser.SP)


                self.state = 971
                self.match(s_cypherParser.YIELD)
                self.state = 972
                self.match(s_cypherParser.SP)
                self.state = 975
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 973
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 974
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.oC_YieldItem()
            self.state = 990
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 980
                        self.match(s_cypherParser.SP)


                    self.state = 983
                    self.match(s_cypherParser.T__3)
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 984
                        self.match(s_cypherParser.SP)


                    self.state = 987
                    self.oC_YieldItem() 
                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 993
                    self.match(s_cypherParser.SP)


                self.state = 996
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 999
                self.oC_ProcedureResultField()
                self.state = 1000
                self.match(s_cypherParser.SP)
                self.state = 1001
                self.match(s_cypherParser.AS)
                self.state = 1002
                self.match(s_cypherParser.SP)


            self.state = 1006
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(s_cypherParser.WITH)
            self.state = 1009
            self.oC_ProjectionBody()
            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1010
                    self.match(s_cypherParser.SP)


                self.state = 1013
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(s_cypherParser.RETURN)
            self.state = 1017
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1019
                    self.match(s_cypherParser.SP)


                self.state = 1022
                self.match(s_cypherParser.DISTINCT)


            self.state = 1025
            self.match(s_cypherParser.SP)
            self.state = 1026
            self.oC_ProjectionItems()
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1027
                self.match(s_cypherParser.SP)
                self.state = 1028
                self.oC_Order()


            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1031
                self.match(s_cypherParser.SP)
                self.state = 1032
                self.oC_Skip()


            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1035
                self.match(s_cypherParser.SP)
                self.state = 1036
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(s_cypherParser.T__13)
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1040
                            self.match(s_cypherParser.SP)


                        self.state = 1043
                        self.match(s_cypherParser.T__3)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1044
                            self.match(s_cypherParser.SP)


                        self.state = 1047
                        self.oC_ProjectionItem() 
                    self.state = 1052
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.oC_ProjectionItem()
                self.state = 1064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1054
                            self.match(s_cypherParser.SP)


                        self.state = 1057
                        self.match(s_cypherParser.T__3)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1058
                            self.match(s_cypherParser.SP)


                        self.state = 1061
                        self.oC_ProjectionItem() 
                    self.state = 1066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.oC_Expression()
                self.state = 1070
                self.match(s_cypherParser.SP)
                self.state = 1071
                self.match(s_cypherParser.AS)
                self.state = 1072
                self.match(s_cypherParser.SP)
                self.state = 1073
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(s_cypherParser.ORDER)
            self.state = 1079
            self.match(s_cypherParser.SP)
            self.state = 1080
            self.match(s_cypherParser.BY)
            self.state = 1081
            self.match(s_cypherParser.SP)
            self.state = 1082
            self.oC_SortItem()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1083
                self.match(s_cypherParser.T__3)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1084
                    self.match(s_cypherParser.SP)


                self.state = 1087
                self.oC_SortItem()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(s_cypherParser.L_SKIP)
            self.state = 1094
            self.match(s_cypherParser.SP)
            self.state = 1095
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(s_cypherParser.LIMIT)
            self.state = 1098
            self.match(s_cypherParser.SP)
            self.state = 1099
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.oC_Expression()
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1102
                    self.match(s_cypherParser.SP)


                self.state = 1105
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(s_cypherParser.WHERE)
            self.state = 1109
            self.match(s_cypherParser.SP)
            self.state = 1110
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.oC_PatternPart()
            self.state = 1123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1113
                        self.match(s_cypherParser.SP)


                    self.state = 1116
                    self.match(s_cypherParser.T__3)
                    self.state = 1118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1117
                        self.match(s_cypherParser.SP)


                    self.state = 1120
                    self.oC_PatternPart() 
                self.state = 1125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.oC_NodePattern()
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1130
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1129
                            self.match(s_cypherParser.SP)


                        self.state = 1132
                        self.oC_PatternElementChain() 
                    self.state = 1137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.match(s_cypherParser.T__4)
                self.state = 1139
                self.oC_PatternElement()
                self.state = 1140
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.oC_NodePattern()
            self.state = 1149 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1145
                        self.match(s_cypherParser.SP)


                    self.state = 1148
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1151 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.oC_RelationshipPattern()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1154
                self.match(s_cypherParser.SP)


            self.state = 1157
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.oC_LeftArrowHead()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1160
                    self.match(s_cypherParser.SP)


                self.state = 1163
                self.oC_Dash()
                self.state = 1165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.match(s_cypherParser.SP)


                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1167
                    self.oC_RelationshipDetail()


                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1170
                    self.match(s_cypherParser.SP)


                self.state = 1173
                self.oC_Dash()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1174
                    self.match(s_cypherParser.SP)


                self.state = 1177
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.oC_LeftArrowHead()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1180
                    self.match(s_cypherParser.SP)


                self.state = 1183
                self.oC_Dash()
                self.state = 1185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1184
                    self.match(s_cypherParser.SP)


                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1187
                    self.oC_RelationshipDetail()


                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1190
                    self.match(s_cypherParser.SP)


                self.state = 1193
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1195
                self.oC_Dash()
                self.state = 1197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1196
                    self.match(s_cypherParser.SP)


                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1199
                    self.oC_RelationshipDetail()


                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1202
                    self.match(s_cypherParser.SP)


                self.state = 1205
                self.oC_Dash()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1206
                    self.match(s_cypherParser.SP)


                self.state = 1209
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1211
                self.oC_Dash()
                self.state = 1213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1212
                    self.match(s_cypherParser.SP)


                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1215
                    self.oC_RelationshipDetail()


                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1218
                    self.match(s_cypherParser.SP)


                self.state = 1221
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_Properties)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1225
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1226
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(s_cypherParser.T__7)
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1230
                self.match(s_cypherParser.SP)


            self.state = 1233
            self.oC_RelTypeName()
            self.state = 1247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1234
                        self.match(s_cypherParser.SP)


                    self.state = 1237
                    self.match(s_cypherParser.T__14)
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1238
                        self.match(s_cypherParser.T__7)


                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1241
                        self.match(s_cypherParser.SP)


                    self.state = 1244
                    self.oC_RelTypeName() 
                self.state = 1249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.oC_NodeLabel()
            self.state = 1257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1251
                        self.match(s_cypherParser.SP)


                    self.state = 1254
                    self.oC_NodeLabel() 
                self.state = 1259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(s_cypherParser.T__7)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1261
                self.match(s_cypherParser.SP)


            self.state = 1264
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(s_cypherParser.T__13)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1267
                self.match(s_cypherParser.SP)


            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1270
                self.oC_IntegerLiteral()
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1271
                    self.match(s_cypherParser.SP)




            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1276
                self.match(s_cypherParser.T__11)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1277
                    self.match(s_cypherParser.SP)


                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1280
                    self.oC_IntegerLiteral()
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1281
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.oC_Atom()
            self.state = 1297 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1293
                        self.match(s_cypherParser.SP)


                    self.state = 1296
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1299 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.oC_XorExpression()
            self.state = 1310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1304
                    self.match(s_cypherParser.SP)
                    self.state = 1305
                    self.match(s_cypherParser.OR)
                    self.state = 1306
                    self.match(s_cypherParser.SP)
                    self.state = 1307
                    self.oC_XorExpression() 
                self.state = 1312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.oC_AndExpression()
            self.state = 1320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1314
                    self.match(s_cypherParser.SP)
                    self.state = 1315
                    self.match(s_cypherParser.XOR)
                    self.state = 1316
                    self.match(s_cypherParser.SP)
                    self.state = 1317
                    self.oC_AndExpression() 
                self.state = 1322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.oC_NotExpression()
            self.state = 1330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1324
                    self.match(s_cypherParser.SP)
                    self.state = 1325
                    self.match(s_cypherParser.AND)
                    self.state = 1326
                    self.match(s_cypherParser.SP)
                    self.state = 1327
                    self.oC_NotExpression() 
                self.state = 1332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1333
                self.match(s_cypherParser.NOT)
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1334
                    self.match(s_cypherParser.SP)


                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1342
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.oC_StringListNullPredicateExpression()
            self.state = 1351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1345
                        self.match(s_cypherParser.SP)


                    self.state = 1348
                    self.oC_PartialComparisonExpression() 
                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                self.match(s_cypherParser.T__1)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1355
                    self.match(s_cypherParser.SP)


                self.state = 1358
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.match(s_cypherParser.T__15)
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1360
                    self.match(s_cypherParser.SP)


                self.state = 1363
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1364
                self.match(s_cypherParser.T__16)
                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1365
                    self.match(s_cypherParser.SP)


                self.state = 1368
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1369
                self.match(s_cypherParser.T__17)
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1370
                    self.match(s_cypherParser.SP)


                self.state = 1373
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1374
                self.match(s_cypherParser.T__18)
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1375
                    self.match(s_cypherParser.SP)


                self.state = 1378
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1379
                self.match(s_cypherParser.T__19)
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1380
                    self.match(s_cypherParser.SP)


                self.state = 1383
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1386
                self.match(s_cypherParser.SP)
                self.state = 1387
                self.match(s_cypherParser.STARTS)
                self.state = 1388
                self.match(s_cypherParser.SP)
                self.state = 1389
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1390
                self.match(s_cypherParser.SP)
                self.state = 1391
                self.match(s_cypherParser.ENDS)
                self.state = 1392
                self.match(s_cypherParser.SP)
                self.state = 1393
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1394
                self.match(s_cypherParser.SP)
                self.state = 1395
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1398
                self.match(s_cypherParser.SP)


            self.state = 1401
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.match(s_cypherParser.SP)
            self.state = 1404
            self.match(s_cypherParser.IN)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1405
                self.match(s_cypherParser.SP)


            self.state = 1408
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(s_cypherParser.SP)
                self.state = 1411
                self.match(s_cypherParser.IS)
                self.state = 1412
                self.match(s_cypherParser.SP)
                self.state = 1413
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.match(s_cypherParser.SP)
                self.state = 1415
                self.match(s_cypherParser.IS)
                self.state = 1416
                self.match(s_cypherParser.SP)
                self.state = 1417
                self.match(s_cypherParser.NOT)
                self.state = 1418
                self.match(s_cypherParser.SP)
                self.state = 1419
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1439
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        self.state = 1424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1423
                            self.match(s_cypherParser.SP)


                        self.state = 1426
                        self.match(s_cypherParser.T__20)
                        self.state = 1428
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1427
                            self.match(s_cypherParser.SP)


                        self.state = 1430
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1431
                            self.match(s_cypherParser.SP)


                        self.state = 1434
                        self.match(s_cypherParser.T__21)
                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1435
                            self.match(s_cypherParser.SP)


                        self.state = 1438
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.oC_PowerOfExpression()
            self.state = 1471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1469
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        self.state = 1446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1445
                            self.match(s_cypherParser.SP)


                        self.state = 1448
                        self.match(s_cypherParser.T__13)
                        self.state = 1450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1449
                            self.match(s_cypherParser.SP)


                        self.state = 1452
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1453
                            self.match(s_cypherParser.SP)


                        self.state = 1456
                        self.match(s_cypherParser.T__22)
                        self.state = 1458
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1457
                            self.match(s_cypherParser.SP)


                        self.state = 1460
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1462
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1461
                            self.match(s_cypherParser.SP)


                        self.state = 1464
                        self.match(s_cypherParser.T__23)
                        self.state = 1466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1465
                            self.match(s_cypherParser.SP)


                        self.state = 1468
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1475
                        self.match(s_cypherParser.SP)


                    self.state = 1478
                    self.match(s_cypherParser.T__24)
                    self.state = 1480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1479
                        self.match(s_cypherParser.SP)


                    self.state = 1482
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1490
                    self.match(s_cypherParser.SP)


                self.state = 1493
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self.oC_Atom()
            self.state = 1503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1497
                        self.match(s_cypherParser.SP)


                    self.state = 1500
                    self.oC_PropertyLookup() 
                self.state = 1505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1506
                    self.match(s_cypherParser.SP)


                self.state = 1509
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(s_cypherParser.T__0)
            self.state = 1514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1513
                self.match(s_cypherParser.SP)


            self.state = 1516
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1520
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1521
                self.match(s_cypherParser.COUNT)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1522
                    self.match(s_cypherParser.SP)


                self.state = 1525
                self.match(s_cypherParser.T__4)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1526
                    self.match(s_cypherParser.SP)


                self.state = 1529
                self.match(s_cypherParser.T__13)
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1530
                    self.match(s_cypherParser.SP)


                self.state = 1533
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1534
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1535
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1536
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1537
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1538
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1539
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1540
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1541
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 1544
                self.match(s_cypherParser.CASE)
                self.state = 1549 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1545
                            self.match(s_cypherParser.SP)


                        self.state = 1548
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1551 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1553
                self.match(s_cypherParser.CASE)
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1554
                    self.match(s_cypherParser.SP)


                self.state = 1557
                self.oC_Expression()
                self.state = 1562 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1558
                            self.match(s_cypherParser.SP)


                        self.state = 1561
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1564 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass


            self.state = 1576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1568
                    self.match(s_cypherParser.SP)


                self.state = 1571
                self.match(s_cypherParser.ELSE)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1572
                    self.match(s_cypherParser.SP)


                self.state = 1575
                self.oC_Expression()


            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1578
                self.match(s_cypherParser.SP)


            self.state = 1581
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(s_cypherParser.WHEN)
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1584
                self.match(s_cypherParser.SP)


            self.state = 1587
            self.oC_Expression()
            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1588
                self.match(s_cypherParser.SP)


            self.state = 1591
            self.match(s_cypherParser.THEN)
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1592
                self.match(s_cypherParser.SP)


            self.state = 1595
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.match(s_cypherParser.T__9)
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1598
                self.match(s_cypherParser.SP)


            self.state = 1601
            self.oC_FilterExpression()
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1602
                    self.match(s_cypherParser.SP)


                self.state = 1605
                self.match(s_cypherParser.T__14)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1606
                    self.match(s_cypherParser.SP)


                self.state = 1609
                self.oC_Expression()


            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1612
                self.match(s_cypherParser.SP)


            self.state = 1615
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(s_cypherParser.T__9)
            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1618
                self.match(s_cypherParser.SP)


            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1621
                self.oC_Variable()
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1622
                    self.match(s_cypherParser.SP)


                self.state = 1625
                self.match(s_cypherParser.T__1)
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1626
                    self.match(s_cypherParser.SP)




            self.state = 1631
            self.oC_RelationshipsPattern()
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1632
                self.match(s_cypherParser.SP)


            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1635
                self.oC_Where()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1636
                    self.match(s_cypherParser.SP)




            self.state = 1641
            self.match(s_cypherParser.T__14)
            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1642
                self.match(s_cypherParser.SP)


            self.state = 1645
            self.oC_Expression()
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1646
                self.match(s_cypherParser.SP)


            self.state = 1649
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1651
                self.match(s_cypherParser.ALL)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1652
                    self.match(s_cypherParser.SP)


                self.state = 1655
                self.match(s_cypherParser.T__4)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1656
                    self.match(s_cypherParser.SP)


                self.state = 1659
                self.oC_FilterExpression()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1660
                    self.match(s_cypherParser.SP)


                self.state = 1663
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.match(s_cypherParser.ANY)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1666
                    self.match(s_cypherParser.SP)


                self.state = 1669
                self.match(s_cypherParser.T__4)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1670
                    self.match(s_cypherParser.SP)


                self.state = 1673
                self.oC_FilterExpression()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1674
                    self.match(s_cypherParser.SP)


                self.state = 1677
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1679
                self.match(s_cypherParser.NONE)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1680
                    self.match(s_cypherParser.SP)


                self.state = 1683
                self.match(s_cypherParser.T__4)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1684
                    self.match(s_cypherParser.SP)


                self.state = 1687
                self.oC_FilterExpression()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1688
                    self.match(s_cypherParser.SP)


                self.state = 1691
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1693
                self.match(s_cypherParser.SINGLE)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1694
                    self.match(s_cypherParser.SP)


                self.state = 1697
                self.match(s_cypherParser.T__4)
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1698
                    self.match(s_cypherParser.SP)


                self.state = 1701
                self.oC_FilterExpression()
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1702
                    self.match(s_cypherParser.SP)


                self.state = 1705
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.oC_IdInColl()
            self.state = 1714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1710
                    self.match(s_cypherParser.SP)


                self.state = 1713
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(s_cypherParser.T__4)
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1719
                self.match(s_cypherParser.SP)


            self.state = 1722
            self.oC_Expression()
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1723
                self.match(s_cypherParser.SP)


            self.state = 1726
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.oC_Variable()
            self.state = 1729
            self.match(s_cypherParser.SP)
            self.state = 1730
            self.match(s_cypherParser.IN)
            self.state = 1731
            self.match(s_cypherParser.SP)
            self.state = 1732
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.oC_FunctionName()
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1735
                self.match(s_cypherParser.SP)


            self.state = 1738
            self.match(s_cypherParser.T__4)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1739
                self.match(s_cypherParser.SP)


            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1742
                self.match(s_cypherParser.DISTINCT)
                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1743
                    self.match(s_cypherParser.SP)




            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1748
                self.oC_Expression()
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1749
                    self.match(s_cypherParser.SP)


                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1752
                    self.match(s_cypherParser.T__3)
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1753
                        self.match(s_cypherParser.SP)


                    self.state = 1756
                    self.oC_Expression()
                    self.state = 1758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1757
                        self.match(s_cypherParser.SP)


                    self.state = 1764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1767
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.oC_Namespace()
            self.state = 1770
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(s_cypherParser.EXISTS)
            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1773
                self.match(s_cypherParser.SP)


            self.state = 1776
            self.match(s_cypherParser.T__6)
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1777
                self.match(s_cypherParser.SP)


            self.state = 1788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1780
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1781
                self.oC_Pattern()
                self.state = 1786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 1783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1782
                        self.match(s_cypherParser.SP)


                    self.state = 1785
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1790
                self.match(s_cypherParser.SP)


            self.state = 1793
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.oC_ProcedureName()
            self.state = 1797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1796
                self.match(s_cypherParser.SP)


            self.state = 1799
            self.match(s_cypherParser.T__4)
            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1800
                self.match(s_cypherParser.SP)


            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1803
                self.oC_Expression()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1804
                    self.match(s_cypherParser.SP)


                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1807
                    self.match(s_cypherParser.T__3)
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1808
                        self.match(s_cypherParser.SP)


                    self.state = 1811
                    self.oC_Expression()
                    self.state = 1813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1812
                        self.match(s_cypherParser.SP)


                    self.state = 1819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1822
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.oC_Namespace()
            self.state = 1829
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1831
                    self.oC_SymbolicName()
                    self.state = 1832
                    self.match(s_cypherParser.T__0) 
                self.state = 1838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_Literal)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1841
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1842
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1843
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1844
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1845
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1846
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1851
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1852
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(s_cypherParser.T__9)
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1860
                self.match(s_cypherParser.SP)


            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1863
                self.oC_Expression()
                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1864
                    self.match(s_cypherParser.SP)


                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1867
                    self.match(s_cypherParser.T__3)
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1868
                        self.match(s_cypherParser.SP)


                    self.state = 1871
                    self.oC_Expression()
                    self.state = 1873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1872
                        self.match(s_cypherParser.SP)


                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1882
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.match(s_cypherParser.T__6)
            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1885
                self.match(s_cypherParser.SP)


            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1888
                self.oC_PropertyKeyName()
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1889
                    self.match(s_cypherParser.SP)


                self.state = 1892
                self.match(s_cypherParser.T__7)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1893
                    self.match(s_cypherParser.SP)


                self.state = 1896
                self.oC_Expression()
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1897
                    self.match(s_cypherParser.SP)


                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1900
                    self.match(s_cypherParser.T__3)
                    self.state = 1902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1901
                        self.match(s_cypherParser.SP)


                    self.state = 1904
                    self.oC_PropertyKeyName()
                    self.state = 1906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1905
                        self.match(s_cypherParser.SP)


                    self.state = 1908
                    self.match(s_cypherParser.T__7)
                    self.state = 1910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1909
                        self.match(s_cypherParser.SP)


                    self.state = 1912
                    self.oC_Expression()
                    self.state = 1914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1913
                        self.match(s_cypherParser.SP)


                    self.state = 1920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1923
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.match(s_cypherParser.T__25)
            self.state = 1930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1928
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1929
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_SchemaName)
        try:
            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1932
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1933
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





